{
  "version": 3,
  "sources": ["../src/drawBox.ts"],
  "sourcesContent": ["import chalk from 'chalk'\nimport cliTruncate from 'cli-truncate'\nimport stringWidth from 'string-width'\n\nexport type BoxOptions = {\n  title?: string\n  width: number\n  height: number\n  str: string\n  horizontalPadding?: number\n  verticalPadding?: number\n}\n\nconst chars = {\n  topLeft: '\u250C',\n  topRight: '\u2510',\n  bottomRight: '\u2518',\n  bottomLeft: '\u2514',\n  vertical: '\u2502',\n  horizontal: '\u2500',\n}\n\nfunction maxLineLength(str: string): number {\n  return (\n    str.split('\\n').reduce((max, curr) => Math.max(max, stringWidth(curr)), 0) +\n    2\n  )\n}\n\nexport function drawBox({\n  title,\n  width,\n  height,\n  str,\n  horizontalPadding,\n}: BoxOptions): string {\n  horizontalPadding = horizontalPadding || 0\n  width = width || maxLineLength(str) + horizontalPadding * 2\n  const topLine = title\n    ? chalk.grey(chars.topLeft + chars.horizontal) +\n      ' ' +\n      chalk.reset.bold(title) +\n      ' ' +\n      chalk.grey(\n        chars.horizontal.repeat(width - title.length - 2 - 3) + chars.topRight,\n      ) +\n      chalk.reset()\n    : chalk.grey(chars.topLeft + chars.horizontal) +\n      chalk.grey(chars.horizontal.repeat(width - 3) + chars.topRight)\n\n  const bottomLine =\n    chars.bottomLeft + chars.horizontal.repeat(width - 2) + chars.bottomRight\n\n  const lines = str.split('\\n')\n\n  if (lines.length < height) {\n    lines.push(...new Array(height - lines.length).fill(''))\n  }\n\n  const mappedLines = lines\n    .slice(-height)\n    .map((l) => {\n      const lineWidth = Math.min(stringWidth(l), width)\n      const paddingRight = Math.max(width - lineWidth - 2, 0)\n      return `${chalk.grey(chars.vertical)}${' '.repeat(\n        horizontalPadding!,\n      )}${chalk.reset(cliTruncate(l, width - 2))}${' '.repeat(\n        paddingRight - horizontalPadding!,\n      )}${chalk.grey(chars.vertical)}`\n    })\n    .join('\\n')\n\n  return chalk.grey(topLine + '\\n' + mappedLines + '\\n' + bottomLine)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,0BAAwB;AACxB,0BAAwB;AAWxB,MAAM,QAAQ;AAAA,EACZ,SAAS;AAAA,EACT,UAAU;AAAA,EACV,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,YAAY;AAAA;AAGd,uBAAuB,KAAqB;AAC1C,SACE,IAAI,MAAM,MAAM,OAAO,CAAC,KAAK,SAAS,KAAK,IAAI,KAAK,iCAAY,QAAQ,KACxE;AAAA;AAIG,iBAAiB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,GACqB;AACrB,sBAAoB,qBAAqB;AACzC,UAAQ,SAAS,cAAc,OAAO,oBAAoB;AAC1D,QAAM,UAAU,QACZ,qBAAM,KAAK,MAAM,UAAU,MAAM,cACjC,MACA,qBAAM,MAAM,KAAK,SACjB,MACA,qBAAM,KACJ,MAAM,WAAW,OAAO,QAAQ,MAAM,SAAS,IAAI,KAAK,MAAM,YAEhE,qBAAM,UACN,qBAAM,KAAK,MAAM,UAAU,MAAM,cACjC,qBAAM,KAAK,MAAM,WAAW,OAAO,QAAQ,KAAK,MAAM;AAE1D,QAAM,aACJ,MAAM,aAAa,MAAM,WAAW,OAAO,QAAQ,KAAK,MAAM;AAEhE,QAAM,QAAQ,IAAI,MAAM;AAExB,MAAI,MAAM,SAAS,QAAQ;AACzB,UAAM,KAAK,GAAG,IAAI,MAAM,SAAS,MAAM,QAAQ,KAAK;AAAA;AAGtD,QAAM,cAAc,MACjB,MAAM,CAAC,QACP,IAAI,CAAC,MAAM;AACV,UAAM,YAAY,KAAK,IAAI,iCAAY,IAAI;AAC3C,UAAM,eAAe,KAAK,IAAI,QAAQ,YAAY,GAAG;AACrD,WAAO,GAAG,qBAAM,KAAK,MAAM,YAAY,IAAI,OACzC,qBACE,qBAAM,MAAM,iCAAY,GAAG,QAAQ,MAAM,IAAI,OAC/C,eAAe,qBACb,qBAAM,KAAK,MAAM;AAAA,KAEtB,KAAK;AAER,SAAO,qBAAM,KAAK,UAAU,OAAO,cAAc,OAAO;AAAA;",
  "names": []
}
