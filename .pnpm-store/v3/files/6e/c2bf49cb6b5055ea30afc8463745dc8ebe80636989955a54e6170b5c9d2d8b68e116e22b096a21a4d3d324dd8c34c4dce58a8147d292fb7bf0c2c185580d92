{
  "version": 3,
  "sources": ["../src/getPackedPackage.ts"],
  "sourcesContent": ["import copy from '@timsuchanek/copy'\nimport execa from 'execa'\nimport fs from 'fs'\nimport makeDir from 'make-dir'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport { resolvePkg } from './utils/resolve'\nimport rimraf from 'rimraf'\nimport { quote } from 'shell-quote'\nimport tar from 'tar'\nimport tempy from 'tempy'\nimport { promisify } from 'util'\nimport { hasYarn } from './utils/hasYarn'\n\n// why not directly use Sindre's 'del'? Because it's not ncc-able :/\nconst del = promisify(rimraf)\nconst readdir = promisify(fs.readdir)\nconst rename = promisify(fs.rename)\n\nexport async function getPackedPackage(\n  name: string,\n  target?: string,\n  packageDir?: string,\n): Promise<string | void> {\n  packageDir =\n    packageDir ||\n    (await resolvePkg(name, { basedir: process.cwd() })) ||\n    (await resolvePkg(name, { basedir: target }))\n\n  if (!packageDir) {\n    const pkg = await readPkgUp({\n      cwd: target,\n    })\n    if (pkg && pkg.packageJson.name === name) {\n      packageDir = path.dirname(pkg.path)\n    }\n  }\n\n  if (!packageDir && fs.existsSync(path.join(process.cwd(), 'package.json'))) {\n    packageDir = process.cwd()\n  }\n\n  if (!packageDir) {\n    throw new Error(\n      `Error in getPackage: Could not resolve package ${name} from ${__dirname}`,\n    )\n  }\n  const tmpDir = tempy.directory() // thanks Sindre\n  const archivePath = path.join(tmpDir, `package.tgz`)\n\n  // Check if yarn is available.\n  const isYarn = await hasYarn(packageDir)\n\n  const packCmd = isYarn\n    ? ['yarn', 'pack', '-f', archivePath]\n    : ['npm', 'pack', packageDir]\n\n  // shell-quote args\n  const escapedCmd = quote(packCmd)\n\n  // pack into a .tgz in a tmp dir\n  await execa.command(escapedCmd, {\n    shell: true,\n    cwd: isYarn ? packageDir : tmpDir, // for npm pack it outputs a file to the cwd\n  })\n\n  if (!isYarn) {\n    // since npm pack does not have option to specify a filename we change it here\n    // find single tgz in temp folder\n    const filename = (await readdir(tmpDir))[0]\n    // rename it to match expected filename\n    await rename(path.join(tmpDir, filename), archivePath)\n  }\n\n  // extract and delete the archive\n  await tar.extract({\n    cwd: tmpDir,\n    file: archivePath,\n  })\n\n  await del(archivePath)\n\n  /**\n   * Only if a target is provided, perform the copy\n   */\n  if (target) {\n    // make target dir\n    await makeDir(target)\n\n    // copy stuff over\n    await copy({\n      from: path.join(tmpDir, 'package'), // when using yarn pack and extracting it, it includes a folder called \"package\"\n      to: target,\n      recursive: true,\n      parallelJobs: 20,\n      overwrite: true,\n    })\n\n    // delete tmp dir\n    await del(tmpDir)\n  }\n\n  return path.join(tmpDir, 'package')\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,mBAAkB;AAClB,gBAAe;AACf,sBAAoB;AACpB,kBAAiB;AACjB,yBAAsB;AACtB,qBAA2B;AAC3B,oBAAmB;AACnB,yBAAsB;AACtB,iBAAgB;AAChB,mBAAkB;AAClB,kBAA0B;AAC1B,qBAAwB;AAGxB,MAAM,MAAM,2BAAU;AACtB,MAAM,UAAU,2BAAU,kBAAG;AAC7B,MAAM,SAAS,2BAAU,kBAAG;AAE5B,gCACE,MACA,QACA,YACwB;AACxB,eACE,cACC,MAAM,+BAAW,MAAM,EAAE,SAAS,QAAQ,YAC1C,MAAM,+BAAW,MAAM,EAAE,SAAS;AAErC,MAAI,CAAC,YAAY;AACf,UAAM,MAAM,MAAM,gCAAU;AAAA,MAC1B,KAAK;AAAA;AAEP,QAAI,OAAO,IAAI,YAAY,SAAS,MAAM;AACxC,mBAAa,oBAAK,QAAQ,IAAI;AAAA;AAAA;AAIlC,MAAI,CAAC,cAAc,kBAAG,WAAW,oBAAK,KAAK,QAAQ,OAAO,kBAAkB;AAC1E,iBAAa,QAAQ;AAAA;AAGvB,MAAI,CAAC,YAAY;AACf,UAAM,IAAI,MACR,kDAAkD,aAAa;AAAA;AAGnE,QAAM,SAAS,qBAAM;AACrB,QAAM,cAAc,oBAAK,KAAK,QAAQ;AAGtC,QAAM,SAAS,MAAM,4BAAQ;AAE7B,QAAM,UAAU,SACZ,CAAC,QAAQ,QAAQ,MAAM,eACvB,CAAC,OAAO,QAAQ;AAGpB,QAAM,aAAa,8BAAM;AAGzB,QAAM,qBAAM,QAAQ,YAAY;AAAA,IAC9B,OAAO;AAAA,IACP,KAAK,SAAS,aAAa;AAAA;AAG7B,MAAI,CAAC,QAAQ;AAGX,UAAM,WAAY,OAAM,QAAQ,SAAS;AAEzC,UAAM,OAAO,oBAAK,KAAK,QAAQ,WAAW;AAAA;AAI5C,QAAM,mBAAI,QAAQ;AAAA,IAChB,KAAK;AAAA,IACL,MAAM;AAAA;AAGR,QAAM,IAAI;AAKV,MAAI,QAAQ;AAEV,UAAM,6BAAQ;AAGd,UAAM,yBAAK;AAAA,MACT,MAAM,oBAAK,KAAK,QAAQ;AAAA,MACxB,IAAI;AAAA,MACJ,WAAW;AAAA,MACX,cAAc;AAAA,MACd,WAAW;AAAA;AAIb,UAAM,IAAI;AAAA;AAGZ,SAAO,oBAAK,KAAK,QAAQ;AAAA;",
  "names": []
}
