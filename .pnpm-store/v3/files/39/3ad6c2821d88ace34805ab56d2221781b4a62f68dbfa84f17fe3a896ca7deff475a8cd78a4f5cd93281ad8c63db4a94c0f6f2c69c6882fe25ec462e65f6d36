// Generated by Peggy 2.0.1.
//
// https://peggyjs.org/
"use strict";
function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    // istanbul ignore next Check is a necessary evil to support older environments
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var loc = this.location.source + ":" + s.line + ":" + s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", s.line.toString().length, ' ');
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = (last - s.column) || 1;
            str += "\n --> " + loc + "\n"
                + filler + " |\n"
                + s.line + " | " + line + "\n"
                + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                + peg$padEnd("", hatLen, "^");
        }
        else {
            str += "\n at " + loc;
        }
    }
    return str;
};
peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },
        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function () {
            return "any character";
        },
        end: function () {
            return "end of input";
        },
        other: function (expectation) {
            return expectation.description;
        }
    };
    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }
        switch (descriptions.length) {
            case 1:
                return descriptions[0];
            case 2:
                return descriptions[0] + " or " + descriptions[1];
            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }
    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { schema: peg$parseschema, field_type: peg$parsefield_type, expression: peg$parseexpression };
    var peg$startRuleFunction = peg$parseschema;
    var peg$c0 = "model";
    var peg$c1 = "type";
    var peg$c2 = "{";
    var peg$c3 = "}";
    var peg$c4 = ":";
    var peg$c5 = "[]";
    var peg$c6 = "?";
    var peg$c7 = "!";
    var peg$c8 = "[";
    var peg$c9 = "]";
    var peg$c10 = "Unsupported(";
    var peg$c11 = ")";
    var peg$c12 = "=";
    var peg$c13 = "datasource";
    var peg$c14 = "generator";
    var peg$c15 = "enum";
    var peg$c16 = "@@";
    var peg$c17 = "@";
    var peg$c18 = "(";
    var peg$c19 = ",";
    var peg$c20 = "///";
    var peg$c21 = "//";
    var peg$c22 = ".";
    var peg$c23 = "false";
    var peg$c24 = "true";
    var peg$c25 = "-";
    var peg$c26 = "\"";
    var peg$c27 = "\\";
    var peg$r0 = /^[0-9a-z]/i;
    var peg$r1 = /^[0-9a-z_\-]/i;
    var peg$r2 = /^[0-9]/;
    var peg$r3 = /^[^\0-\x1F"]/;
    var peg$r4 = /^[ \t]/;
    var peg$r5 = /^[ \t\n\r]/;
    var peg$r6 = /^[\n\r]/;
    var peg$e0 = peg$literalExpectation("model", false);
    var peg$e1 = peg$literalExpectation("type", false);
    var peg$e2 = peg$literalExpectation("{", false);
    var peg$e3 = peg$literalExpectation("}", false);
    var peg$e4 = peg$literalExpectation(":", false);
    var peg$e5 = peg$literalExpectation("[]", false);
    var peg$e6 = peg$literalExpectation("?", false);
    var peg$e7 = peg$literalExpectation("!", false);
    var peg$e8 = peg$literalExpectation("[", false);
    var peg$e9 = peg$literalExpectation("]", false);
    var peg$e10 = peg$literalExpectation("Unsupported(", false);
    var peg$e11 = peg$literalExpectation(")", false);
    var peg$e12 = peg$literalExpectation("=", false);
    var peg$e13 = peg$literalExpectation("datasource", false);
    var peg$e14 = peg$literalExpectation("generator", false);
    var peg$e15 = peg$literalExpectation("enum", false);
    var peg$e16 = peg$literalExpectation("@@", false);
    var peg$e17 = peg$literalExpectation("@", false);
    var peg$e18 = peg$literalExpectation("(", false);
    var peg$e19 = peg$literalExpectation(",", false);
    var peg$e20 = peg$literalExpectation("///", false);
    var peg$e21 = peg$literalExpectation("//", false);
    var peg$e22 = peg$anyExpectation();
    var peg$e23 = peg$literalExpectation(".", false);
    var peg$e24 = peg$classExpectation([["0", "9"], ["a", "z"]], false, true);
    var peg$e25 = peg$classExpectation([["0", "9"], ["a", "z"], "_", "-"], false, true);
    var peg$e26 = peg$literalExpectation("false", false);
    var peg$e27 = peg$literalExpectation("true", false);
    var peg$e28 = peg$literalExpectation("-", false);
    var peg$e29 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e30 = peg$literalExpectation("\"", false);
    var peg$e31 = peg$literalExpectation("\\", false);
    var peg$e32 = peg$classExpectation([["\0", "\x1F"], "\""], true, false);
    var peg$e33 = peg$otherExpectation("horizontal whitespace");
    var peg$e34 = peg$classExpectation([" ", "\t"], false, false);
    var peg$e35 = peg$otherExpectation("any whitespace");
    var peg$e36 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$e37 = peg$otherExpectation("end of line");
    var peg$e38 = peg$classExpectation(["\n", "\r"], false, false);
    var peg$f0 = function (body) { return { kind: "schema", declarations: optionalList(body) }; };
    var peg$f1 = function (head, tail) { return buildList(head, tail, 1); };
    var peg$f2 = function (kind, name, members) { return { kind, name, members: optionalList(members), location: location() }; };
    var peg$f3 = function (head, tail) { return buildList(head, tail, 1); };
    var peg$f4 = function (name, type, attributes, comment) { return { kind: "field", name, type, attributes: optionalList(attributes), comment, location: location() }; };
    var peg$f5 = function (type) { return { kind: "list", type }; };
    var peg$f6 = function (type) { return { kind: "optional", type }; };
    var peg$f7 = function (type) { return { kind: "required", type }; };
    var peg$f8 = function (type) { return { kind: "list", type }; };
    var peg$f9 = function (name) { return { kind: "typeId", name }; };
    var peg$f10 = function (type) { return { kind: "unsupported", type }; };
    var peg$f11 = function (name, type, attributes) { return { kind: "typeAlias", name, type, attributes: optionalList(attributes), location: location() }; };
    var peg$f12 = function (kind, name, members) { return { kind, name, members: optionalList(members), location: location() }; };
    var peg$f13 = function (head, tail) { return buildList(head, tail, 1); };
    var peg$f14 = function (name, value, comment) { return { kind: "config", name, value, comment, location: location() }; };
    var peg$f15 = function (kind, name, members) { return { kind, name, members: optionalList(members), location: location() }; };
    var peg$f16 = function (head, tail) { return buildList(head, tail, 1); };
    var peg$f17 = function (name, attributes, comment) { return { kind: "enumValue", name, attributes: optionalList(attributes), comment, location: location() }; };
    var peg$f18 = function (path, args, comment) { return { kind: "blockAttribute", path, args: optionalList(args), comment, location: location() }; };
    var peg$f19 = function (path, args) { return { kind: "fieldAttribute", path, args: optionalList(args), location: location() }; };
    var peg$f20 = function (head, tail) { return buildList(head, tail, 1); };
    var peg$f21 = function (args) { return optionalList(args); };
    var peg$f22 = function (head, tail) { return buildList(head, tail, 2); };
    var peg$f23 = function (name, expression) { return { kind: "namedArgument", name, expression }; };
    var peg$f24 = function (head, tail) { return { kind: "commentBlock", comments: buildList(head, tail, 1) }; };
    var peg$f25 = function (text) { return { kind: "docComment", text, location: location() }; };
    var peg$f26 = function (text) { return { kind: "comment", text, location: location() }; };
    var peg$f27 = function () { return text(); };
    var peg$f28 = function (id) { return { kind: "name", value: id, location: location() }; };
    var peg$f29 = function (head, tail) { return { kind: "path", value: buildList(head, tail, 2), location: location() }; };
    var peg$f30 = function (head, tail) { return head + tail.join(""); };
    var peg$f31 = function (path, args) { return { kind: "functionCall", path, args }; };
    var peg$f32 = function (items) { return { kind: "array", items: optionalList(items) }; };
    var peg$f33 = function (head, tail) { return buildList(head, tail, 2); };
    var peg$f34 = function () { return { kind: "literal", value: text() === "true" }; };
    var peg$f35 = function () { return { kind: "literal", value: parseInt(text()) }; };
    var peg$f36 = function (value) { return { kind: "literal", value }; };
    var peg$f37 = function () { return text(); };
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$result;
    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        return {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parseschema() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseWS();
        s2 = peg$parsedeclarations();
        if (s2 === peg$FAILED) {
            s2 = null;
        }
        s3 = peg$parseWS();
        peg$savedPos = s0;
        s0 = peg$f0(s2);
        return s0;
    }
    function peg$parsedeclarations() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsedeclaration();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseWS();
            s5 = peg$parsedeclaration();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseWS();
                s5 = peg$parsedeclaration();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f1(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsedeclaration() {
        var s0;
        s0 = peg$parsemodel_declaration();
        if (s0 === peg$FAILED) {
            s0 = peg$parseenum_declaration();
            if (s0 === peg$FAILED) {
                s0 = peg$parseconfig_block();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsetype_alias();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsecomment_block();
                    }
                }
            }
        }
        return s0;
    }
    function peg$parsemodel_declaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c0) {
            s1 = peg$c0;
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e0);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c1) {
                s1 = peg$c1;
                peg$currPos += 4;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsename();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s5 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseWS();
                    s7 = peg$parsemodel_declaration_members();
                    if (s7 === peg$FAILED) {
                        s7 = null;
                    }
                    s8 = peg$parseWS();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c3;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f2(s1, s3, s7);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsemodel_declaration_members() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsemodel_declaration_member();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseWS();
            s5 = peg$parsemodel_declaration_member();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseWS();
                s5 = peg$parsemodel_declaration_member();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f3(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsemodel_declaration_member() {
        var s0;
        s0 = peg$parsefield_declaration();
        if (s0 === peg$FAILED) {
            s0 = peg$parseblock_attribute();
            if (s0 === peg$FAILED) {
                s0 = peg$parsecomment_block();
            }
        }
        return s0;
    }
    function peg$parsefield_declaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        s1 = peg$parsename();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c4;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse__();
            s5 = peg$parsefield_type();
            if (s5 === peg$FAILED) {
                s5 = null;
            }
            s6 = peg$parse__();
            s7 = peg$parsefield_attributes();
            if (s7 === peg$FAILED) {
                s7 = null;
            }
            s8 = peg$parse__();
            s9 = peg$parsetrailing_comment();
            if (s9 === peg$FAILED) {
                s9 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f4(s1, s5, s7, s9);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsefield_type() {
        var s0;
        s0 = peg$parselist_type();
        if (s0 === peg$FAILED) {
            s0 = peg$parseoptional_type();
            if (s0 === peg$FAILED) {
                s0 = peg$parselegacy_required_type();
                if (s0 === peg$FAILED) {
                    s0 = peg$parselegacy_list_type();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsebase_type();
                    }
                }
            }
        }
        return s0;
    }
    function peg$parselist_type() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parsebase_type();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.substr(peg$currPos, 2) === peg$c5) {
                s3 = peg$c5;
                peg$currPos += 2;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f5(s1);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseoptional_type() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parsebase_type();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 63) {
                s3 = peg$c6;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e6);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f6(s1);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parselegacy_required_type() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parsebase_type();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 33) {
                s3 = peg$c7;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e7);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f7(s1);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parselegacy_list_type() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c8;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsebase_type();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c9;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f8(s3);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsebase_type() {
        var s0, s1;
        s0 = peg$parseunsupported_type();
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsename();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f9(s1);
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseunsupported_type() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c10) {
            s1 = peg$c10;
            peg$currPos += 12;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e10);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsestring_literal();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c11;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e11);
                    }
                }
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f10(s3);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsetype_alias() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c1) {
            s1 = peg$c1;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e1);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsename();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 61) {
                    s5 = peg$c12;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e12);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parsebase_type();
                    if (s7 !== peg$FAILED) {
                        s8 = peg$parse__();
                        s9 = peg$parsefield_attributes();
                        if (s9 === peg$FAILED) {
                            s9 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f11(s3, s7, s9);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseconfig_block() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c13) {
            s1 = peg$c13;
            peg$currPos += 10;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e13);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c14) {
                s1 = peg$c14;
                peg$currPos += 9;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e14);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsename();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s5 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseWS();
                    s7 = peg$parseconfig_block_members();
                    if (s7 === peg$FAILED) {
                        s7 = null;
                    }
                    s8 = peg$parseWS();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c3;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f12(s1, s3, s7);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseconfig_block_members() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseconfig_block_member();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseWS();
            s5 = peg$parseconfig_block_member();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseWS();
                s5 = peg$parseconfig_block_member();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f13(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseconfig_block_member() {
        var s0;
        s0 = peg$parsekey_value();
        if (s0 === peg$FAILED) {
            s0 = peg$parsecomment_block();
        }
        return s0;
    }
    function peg$parsekey_value() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parsename();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c12;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseexpression();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parsetrailing_comment();
                    if (s7 === peg$FAILED) {
                        s7 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f14(s1, s5, s7);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseenum_declaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e15);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsename();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (input.charCodeAt(peg$currPos) === 123) {
                    s5 = peg$c2;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parseWS();
                    s7 = peg$parseenum_declaration_members();
                    if (s7 === peg$FAILED) {
                        s7 = null;
                    }
                    s8 = peg$parseWS();
                    if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c3;
                        peg$currPos++;
                    }
                    else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e3);
                        }
                    }
                    if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f15(s1, s3, s7);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseenum_declaration_members() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parseenum_declaration_member();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseWS();
            s5 = peg$parseenum_declaration_member();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseWS();
                s5 = peg$parseenum_declaration_member();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f16(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseenum_declaration_member() {
        var s0;
        s0 = peg$parseenum_value_declaration();
        if (s0 === peg$FAILED) {
            s0 = peg$parseblock_attribute();
            if (s0 === peg$FAILED) {
                s0 = peg$parsecomment_block();
            }
        }
        return s0;
    }
    function peg$parseenum_value_declaration() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsename();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsefield_attributes();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse__();
            s5 = peg$parsetrailing_comment();
            if (s5 === peg$FAILED) {
                s5 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f17(s1, s3, s5);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseblock_attribute() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c16) {
            s1 = peg$c16;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsepath();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parsearguments_list();
                if (s5 === peg$FAILED) {
                    s5 = null;
                }
                s6 = peg$parse__();
                s7 = peg$parsetrailing_comment();
                if (s7 === peg$FAILED) {
                    s7 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f18(s3, s5, s7);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsefield_attribute() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 64) {
            s1 = peg$c17;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e17);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsepath();
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parsearguments_list();
                if (s5 === peg$FAILED) {
                    s5 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f19(s3, s5);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsefield_attributes() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsefield_attribute();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse__();
            s5 = peg$parsefield_attribute();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse__();
                s5 = peg$parsefield_attribute();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f20(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsearguments_list() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c18;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e18);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsearguments();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c19;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s5 === peg$FAILED) {
                s5 = null;
            }
            s6 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c11;
                peg$currPos++;
            }
            else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e11);
                }
            }
            if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f21(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsearguments() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseargument();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = [];
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c19;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseargument();
                if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c19;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e19);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseargument();
                    if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f22(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseargument() {
        var s0;
        s0 = peg$parsenamed_argument();
        if (s0 === peg$FAILED) {
            s0 = peg$parseexpression();
        }
        return s0;
    }
    function peg$parsenamed_argument() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsename();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 58) {
                s3 = peg$c4;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                s5 = peg$parseexpression();
                if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f23(s1, s5);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsecomment_block() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        s1 = peg$parsetrailing_comment();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseWS();
            s5 = peg$parsetrailing_comment();
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseWS();
                s5 = peg$parsetrailing_comment();
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f24(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsetrailing_comment() {
        var s0;
        s0 = peg$parsedoc_comment();
        if (s0 === peg$FAILED) {
            s0 = peg$parsecomment();
        }
        return s0;
    }
    function peg$parsedoc_comment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c20) {
            s1 = peg$c20;
            peg$currPos += 3;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e20);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsedoc_content();
            peg$savedPos = s0;
            s0 = peg$f25(s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsecomment() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c21) {
            s1 = peg$c21;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e21);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsedoc_content();
            peg$savedPos = s0;
            s0 = peg$f26(s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsedoc_content() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseEOL();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
            s3 = undefined;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e22);
                }
            }
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseEOL();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
                s3 = undefined;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e22);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        peg$savedPos = s0;
        s1 = peg$f27();
        s0 = s1;
        return s0;
    }
    function peg$parsename() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f28(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parsepath() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = [];
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c22;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseidentifier();
                if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s5 = peg$c22;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e23);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseidentifier();
                    if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f29(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseidentifier() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (peg$r0.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e24);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e25);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e25);
                    }
                }
            }
            peg$savedPos = s0;
            s0 = peg$f30(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsefunction_call() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parsepath();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parsearguments_list();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f31(s1, s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsearray_expression() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c8;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e8);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = peg$parseexpression_list();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            s4 = peg$parse__();
            if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c9;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f32(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseexpression_list() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseexpression();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            s3 = [];
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c19;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse__();
                s7 = peg$parseexpression();
                if (s7 !== peg$FAILED) {
                    s5 = [s5, s6, s7];
                    s4 = s5;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c19;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e19);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    s7 = peg$parseexpression();
                    if (s7 !== peg$FAILED) {
                        s5 = [s5, s6, s7];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f33(s1, s3);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseexpression() {
        var s0;
        s0 = peg$parsefunction_call();
        if (s0 === peg$FAILED) {
            s0 = peg$parsearray_expression();
            if (s0 === peg$FAILED) {
                s0 = peg$parseboolean_literal();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsenumeric_literal();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parsestring_literal();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parsepath();
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseboolean_literal() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c23) {
            s1 = peg$c23;
            peg$currPos += 5;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e26);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c24) {
                s1 = peg$c24;
                peg$currPos += 4;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e27);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f34();
        }
        s0 = s1;
        return s0;
    }
    function peg$parsenumeric_literal() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c25;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e28);
            }
        }
        if (s1 === peg$FAILED) {
            s1 = null;
        }
        s2 = [];
        if (peg$r2.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e29);
            }
        }
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$r2.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e29);
                    }
                }
            }
        }
        else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c22;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$r2.test(input.charAt(peg$currPos))) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e29);
                    }
                }
                if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        if (peg$r2.test(input.charAt(peg$currPos))) {
                            s6 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e29);
                            }
                        }
                    }
                }
                else {
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f35();
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsestring_literal() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c26;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e30);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parsestring_content();
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c26;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e30);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f36(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsestring_content() {
        var s0, s1, s2, s3, s4;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
            s3 = peg$c27;
            peg$currPos++;
        }
        else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e31);
            }
        }
        if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e22);
                }
            }
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
            if (peg$r3.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e32);
                }
            }
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
                s3 = peg$c27;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e31);
                }
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e22);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
                if (peg$r3.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e32);
                    }
                }
            }
        }
        peg$savedPos = s0;
        s1 = peg$f37();
        s0 = s1;
        return s0;
    }
    function peg$parse__() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r4.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e34);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r4.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                }
            }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
            peg$fail(peg$e33);
        }
        return s0;
    }
    function peg$parseWS() {
        var s0, s1;
        peg$silentFails++;
        s0 = [];
        if (peg$r5.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e36);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$r5.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e36);
                }
            }
        }
        peg$silentFails--;
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
            peg$fail(peg$e35);
        }
        return s0;
    }
    function peg$parseEOL() {
        var s0, s1;
        peg$silentFails++;
        if (peg$r6.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e38);
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e37);
            }
        }
        return s0;
    }
    function buildList(head, tail, index) {
        return [head].concat(extractList(tail, index));
    }
    function extractList(list, index) {
        return list.map(function (element) { return element[index]; });
    }
    function optionalList(value) {
        return value !== null ? value : [];
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
module.exports = {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
};
//# sourceMappingURL=parser.js.map