{
  "version": 3,
  "sources": ["../../src/engine-commands/formatSchema.ts"],
  "sourcesContent": ["import Debug from '@prisma/debug'\nimport { BinaryType } from '@prisma/fetch-engine'\nimport execa from 'execa'\nimport fs from 'fs'\nimport { resolveBinary } from '../resolveBinary'\n\nconst debug = Debug('prisma:formatSchema')\n\nconst MAX_BUFFER = 1_000_000_000\n\n// can be used by passing either\n// the schema as a string\n// or a path to the schema file\nexport async function formatSchema({ schema }: { schema: string })\nexport async function formatSchema({ schemaPath }: { schemaPath: string })\nexport async function formatSchema({\n  schemaPath,\n  schema,\n}: {\n  schemaPath?: string\n  schema?: string\n}): Promise<string> {\n  if (!schema && !schemaPath) {\n    throw new Error(`Parameter schema or schemaPath must be passed.`)\n  }\n\n  const prismaFmtPath = await resolveBinary(BinaryType.prismaFmt)\n  const showColors = !process.env.NO_COLOR && process.stdout.isTTY\n\n  const options = {\n    env: {\n      RUST_BACKTRACE: '1',\n      ...(showColors ? { CLICOLOR_FORCE: '1' } : {}),\n    },\n    maxBuffer: MAX_BUFFER,\n  } as execa.Options\n\n  let result\n  if (schemaPath) {\n    if (!fs.existsSync(schemaPath)) {\n      throw new Error(`Schema at ${schemaPath} does not exist.`)\n    }\n    result = await execa(prismaFmtPath, ['format', '-i', schemaPath], options)\n  } else if (schema) {\n    result = await execa(prismaFmtPath, ['format'], {\n      ...options,\n      input: schema,\n    })\n  }\n\n  return result.stdout\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAClB,0BAA2B;AAC3B,mBAAkB;AAClB,gBAAe;AACf,2BAA8B;AAE9B,MAAM,QAAQ,0BAAM;AAEpB,MAAM,aAAa;AAOnB,4BAAmC;AAAA,EACjC;AAAA,EACA;AAAA,GAIkB;AAClB,MAAI,CAAC,UAAU,CAAC,YAAY;AAC1B,UAAM,IAAI,MAAM;AAAA;AAGlB,QAAM,gBAAgB,MAAM,wCAAc,+BAAW;AACrD,QAAM,aAAa,CAAC,QAAQ,IAAI,YAAY,QAAQ,OAAO;AAE3D,QAAM,UAAU;AAAA,IACd,KAAK;AAAA,MACH,gBAAgB;AAAA,SACZ,aAAa,EAAE,gBAAgB,QAAQ;AAAA;AAAA,IAE7C,WAAW;AAAA;AAGb,MAAI;AACJ,MAAI,YAAY;AACd,QAAI,CAAC,kBAAG,WAAW,aAAa;AAC9B,YAAM,IAAI,MAAM,aAAa;AAAA;AAE/B,aAAS,MAAM,0BAAM,eAAe,CAAC,UAAU,MAAM,aAAa;AAAA,aACzD,QAAQ;AACjB,aAAS,MAAM,0BAAM,eAAe,CAAC,WAAW;AAAA,SAC3C;AAAA,MACH,OAAO;AAAA;AAAA;AAIX,SAAO,OAAO;AAAA;",
  "names": []
}
