{"version":3,"sources":["../../../src/swc/__tests__/sources.test.ts"],"sourcesContent":["import { globSources, splitCompilableAndCopyable } from \"../sources\";\nimport fs from \"fs\";\nimport glob from \"fast-glob\";\n\njest.mock(\"fs\");\njest.mock(\"fast-glob\");\n\ndescribe(\"globSources\", () => {\n  beforeEach(() => {\n    (fs as any).resetMockStats();\n  });\n\n  it(\"exclude dotfiles sources when includeDotfiles=false\", async () => {\n    const files = await globSources([\".dotfile\"], false);\n\n    expect([...files]).toEqual([]);\n  });\n\n  it(\"include dotfiles sources when includeDotfiles=true\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"include multiple file sources\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\", \"file\"]);\n  });\n\n  it(\"exclude files that errors on stats\", async () => {\n    (fs as any).setMockStats({ \".dotfile\": { isDirectory: () => false } });\n    (fs as any).setMockStats({ file: new Error(\"Failed stat\") });\n    const files = await globSources([\".dotfile\", \"file\"], true);\n\n    expect([...files]).toEqual([\".dotfile\"]);\n  });\n\n  it(\"includes all files from directory\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockResolvedValue([\"fileDir1\", \"fileDir2\"]);\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\", \"fileDir1\", \"fileDir2\"]);\n  });\n\n  it(\"exclude files from directory that fail to glob\", async () => {\n    (fs as any).setMockStats({ directory: { isDirectory: () => true } });\n    (fs as any).setMockStats({ file: { isDirectory: () => false } });\n\n    (glob as unknown as jest.Mock).mockRejectedValue(new Error(\"Failed\"));\n    const files = await globSources([\"file\", \"directory\"], true);\n\n    expect([...files]).toEqual([\"file\"]);\n  });\n});\n\ndescribe(\"splitCompilableAndCopyable\", () => {\n  const extensions = [\".ts\"];\n  it(\"separate compilable and copyable when copyFiles=true\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = splitCompilableAndCopyable(\n      files,\n      extensions,\n      true\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([\"test.txt\"]);\n  });\n\n  it(\"separate compilable and copyable when copyFiles=false\", () => {\n    const files = [\"test.ts\", \"test.txt\"];\n    const [compilable, copyable] = splitCompilableAndCopyable(\n      files,\n      extensions,\n      false\n    );\n\n    expect(compilable).toEqual([\"test.ts\"]);\n    expect(copyable).toEqual([]);\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","fs","resetMockStats","it","files","globSources","expect","toEqual","setMockStats","isDirectory","file","Error","directory","glob","mockResolvedValue","mockRejectedValue","extensions","compilable","copyable","splitCompilableAndCopyable"],"mappings":"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"}