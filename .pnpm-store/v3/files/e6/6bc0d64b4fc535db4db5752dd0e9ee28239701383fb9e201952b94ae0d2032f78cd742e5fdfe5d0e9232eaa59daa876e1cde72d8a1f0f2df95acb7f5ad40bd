{
  "version": 3,
  "sources": ["../src/types.ts"],
  "sourcesContent": ["import { DMMF } from './dmmf'\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace JsonRPC {\n  export type Request = {\n    jsonrpc: '2.0'\n    method: string\n    params?: any\n    id: number\n  }\n\n  export type Response = SuccessResponse | ErrorResponse\n\n  export type SuccessResponse = {\n    jsonrpc: '2.0'\n    result: any\n    id: number\n  }\n\n  export type ErrorResponse = {\n    jsonrpc: '2.0'\n    error: {\n      code: number\n      message: string\n      data: any\n    }\n    id: number\n  }\n}\n\nexport type Dictionary<T> = { [key: string]: T }\n\nexport interface GeneratorConfig {\n  name: string\n  output: EnvValue | null\n  isCustomOutput?: boolean\n  provider: EnvValue\n  config: Dictionary<string>\n  binaryTargets: BinaryTargetsEnvValue[]\n  previewFeatures: string[]\n}\n\nexport interface EnvValue {\n  fromEnvVar: null | string\n  value: string\n}\n\nexport interface BinaryTargetsEnvValue {\n  fromEnvVar: null | string\n  value: string\n}\n\nexport type ConnectorType =\n  | 'mysql'\n  | 'mongodb'\n  | 'sqlite'\n  | 'postgresql'\n  | 'sqlserver'\n\nexport interface DataSource {\n  name: string\n  activeProvider: ConnectorType\n  provider: ConnectorType\n  url: EnvValue\n  config: { [key: string]: string }\n}\n\nexport type BinaryPaths = {\n  migrationEngine?: { [binaryTarget: string]: string } // key: target, value: path\n  queryEngine?: { [binaryTarget: string]: string }\n  libqueryEngine?: { [binaryTarget: string]: string }\n  introspectionEngine?: { [binaryTarget: string]: string }\n  prismaFmt?: { [binaryTarget: string]: string }\n}\n\nexport type GeneratorOptions = {\n  generator: GeneratorConfig\n  otherGenerators: GeneratorConfig[]\n  schemaPath: string\n  dmmf: DMMF.Document\n  datasources: DataSource[]\n  datamodel: string\n  binaryPaths?: BinaryPaths\n  version: string // version hash\n}\n\nexport type EngineType =\n  | 'queryEngine'\n  | 'libqueryEngine'\n  | 'migrationEngine'\n  | 'introspectionEngine'\n  | 'prismaFmt'\n\nexport type GeneratorManifest = {\n  prettyName?: string\n  defaultOutput?: string\n  denylists?: {\n    models?: string[]\n    fields?: string[]\n  }\n  requiresGenerators?: string[]\n  requiresEngines?: EngineType[]\n  version?: string\n  requiresEngineVersion?: string\n}\n"],
  "mappings": ";;AAAA;",
  "names": []
}
