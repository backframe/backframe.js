import { JsonArray, JsonObject, JsonValue } from "type-fest";
import { BlockAttribute, BlockAttributed, EnumDeclaration, FieldAttributed, ModelDeclaration, NamedArgument, PrismaDeclaration, SchemaArgument, SchemaAttribute, SchemaExpression } from "./ast";
export declare function getDeclarationName(decl: PrismaDeclaration): string;
export declare function hasBlockAttributes(decl: PrismaDeclaration): decl is BlockAttributed;
export declare function hasFieldAttributes(decl: PrismaDeclaration): decl is FieldAttributed;
export declare function getDeclarationAttributes(decl: PrismaDeclaration): readonly SchemaAttribute[];
export declare function getModelAttributes(decl: ModelDeclaration): BlockAttribute[];
export declare function getEnumAttributes(decl: EnumDeclaration): BlockAttribute[];
export declare function findFirstAttribute(attributes: readonly SchemaAttribute[] | undefined, name: string): SchemaAttribute | undefined;
export declare function findAllAttributes(attributes: readonly SchemaAttribute[] | undefined, name: string): SchemaAttribute[];
export declare function findArgument(args: readonly SchemaArgument[] | undefined, name: string, position?: number): NamedArgument | undefined;
export declare function getArgument(args: readonly SchemaArgument[] | undefined, name: string, position?: number): NamedArgument;
export declare function getArgumentExpression(arg: SchemaArgument): SchemaExpression;
export declare function asBooleanArgument(arg: SchemaArgument | undefined): boolean | undefined;
export declare function readBooleanArgument(arg: SchemaArgument): boolean;
export declare function asNumberArgument(arg: SchemaArgument | undefined): number | undefined;
export declare function readNumberArgument(arg: SchemaArgument): number;
export declare function asStringArgument(arg: SchemaArgument | undefined): string | undefined;
export declare function readStringArgument(arg: SchemaArgument): string;
export declare function asFieldReferenceArgument(arg: SchemaArgument | undefined): string | undefined;
export declare function readFieldReferenceArgument(arg: SchemaArgument): string;
export declare function asFieldReferencesArgument(arg: SchemaArgument | undefined): string[] | undefined;
export declare function readFieldReferencesArgument(arg: SchemaArgument): string[];
export declare function getArgumentTypeError(arg: SchemaArgument, expectedType: string): Error;
export declare function getExpressionValue(expr: SchemaExpression): JsonValue;
export declare function getArgumentValues(args: SchemaArgument[]): JsonObject | JsonArray;
export declare function getArgumentValuesArray(args: SchemaArgument[]): JsonArray;
export declare function getArgumentValuesObject(args: NamedArgument[]): JsonObject;
//# sourceMappingURL=access.d.ts.map