{
  "version": 3,
  "sources": ["../../src/utils/parseEnvValue.ts"],
  "sourcesContent": ["import { EnvValue, BinaryTargetsEnvValue } from '@prisma/generator-helper'\nimport chalk from 'chalk'\n\n/**\n * Parses an EnvValue (example: Provider) and return the string value\n *\n * - If there is no env var just return the value\n * - If there is an env var it will be resolve and returned.\n * - If there is an env var is present but can't be resolved an error will be thrown\n */\nexport function parseEnvValue(object: EnvValue) {\n  if (object.fromEnvVar && object.fromEnvVar != 'null') {\n    const value = process.env[object.fromEnvVar]\n    if (!value) {\n      throw new Error(\n        `Attempted to load provider value using \\`env(${\n          object.fromEnvVar\n        })\\` but it was not present. Please ensure that ${chalk.dim(\n          object.fromEnvVar,\n        )} is present in your Environment Variables`,\n      )\n    }\n\n    return value\n  }\n\n  return object.value\n}\n\n/**\n * Parses the BinaryTargetsEnvValue and return the string value\n *\n * - If there is no env var just return the value\n * - If there is an env var it will be resolve and returned.\n * - If there is an env var is present but can't be resolved an error will be thrown\n */\nexport function parseBinaryTargetsEnvValue(\n  object: BinaryTargetsEnvValue,\n): string[] | string {\n  if (object.fromEnvVar && object.fromEnvVar != 'null') {\n    const value = process.env[object.fromEnvVar]\n    if (!value) {\n      throw new Error(\n        `Attempted to load binaryTargets value using \\`env(${\n          object.fromEnvVar\n        })\\` but it was not present. Please ensure that ${chalk.dim(\n          object.fromEnvVar,\n        )} is present in your Environment Variables`,\n      )\n    }\n\n    // value is a string because it's from env var but need to be parsed\n    // can be an array like `[\"darwin\"]`\n    // or a string like `\"darwin\"`\n\n    return JSON.parse(value)\n  }\n\n  return object.value as any\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA,mBAAkB;AASX,uBAAuB,QAAkB;AAC9C,MAAI,OAAO,cAAc,OAAO,cAAc,QAAQ;AACpD,UAAM,QAAQ,QAAQ,IAAI,OAAO;AACjC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MACR,gDACE,OAAO,4DACyC,qBAAM,IACtD,OAAO;AAAA;AAKb,WAAO;AAAA;AAGT,SAAO,OAAO;AAAA;AAUT,oCACL,QACmB;AACnB,MAAI,OAAO,cAAc,OAAO,cAAc,QAAQ;AACpD,UAAM,QAAQ,QAAQ,IAAI,OAAO;AACjC,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MACR,qDACE,OAAO,4DACyC,qBAAM,IACtD,OAAO;AAAA;AASb,WAAO,KAAK,MAAM;AAAA;AAGpB,SAAO,OAAO;AAAA;",
  "names": []
}
