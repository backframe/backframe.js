{
  "version": 3,
  "sources": ["../../../src/common/utils/printGeneratorConfig.ts"],
  "sourcesContent": ["import {\n  GeneratorConfig,\n  BinaryTargetsEnvValue,\n} from '@prisma/generator-helper'\nimport indent from 'indent-string'\n\nexport function printGeneratorConfig(config: GeneratorConfig): string {\n  return String(new GeneratorConfigClass(config))\n}\n\nexport class GeneratorConfigClass {\n  constructor(private readonly config: GeneratorConfig) {}\n  toString(): string {\n    const { config } = this\n    // parse & stringify trims out all the undefined values\n\n    const provider = config.provider.fromEnvVar\n      ? `env(\"${config.provider.fromEnvVar}\")`\n      : config.provider.value\n\n    const obj = JSON.parse(\n      JSON.stringify({\n        provider,\n        binaryTargets: getOriginalBinaryTargetsValue(config.binaryTargets),\n      }),\n    )\n\n    return `generator ${config.name} {\n${indent(printDatamodelObject(obj), 2)}\n}`\n  }\n}\n\nexport function getOriginalBinaryTargetsValue(\n  binaryTargets: BinaryTargetsEnvValue[],\n) {\n  let value: string | string[] | undefined\n  if (binaryTargets.length > 0) {\n    const binaryTargetsFromEnvVar = binaryTargets.find(\n      (object) => object.fromEnvVar !== null,\n    )\n    if (binaryTargetsFromEnvVar) {\n      value = `env(\"${binaryTargetsFromEnvVar.fromEnvVar}\")`\n    } else {\n      value = binaryTargets.map((object) => object.value)\n    }\n  } else {\n    value = undefined\n  }\n\n  return value\n}\n\nexport function printDatamodelObject(obj): string {\n  const maxLength = Object.keys(obj).reduce(\n    (max, curr) => Math.max(max, curr.length),\n    0,\n  )\n  return Object.entries(obj)\n    .map(([key, value]) => `${key.padEnd(maxLength)} = ${niceStringify(value)}`)\n    .join('\\n')\n}\n\nfunction niceStringify(value): any {\n  return JSON.parse(\n    JSON.stringify(value, (_, value) => {\n      if (Array.isArray(value)) {\n        return `[${value.map((element) => JSON.stringify(element)).join(', ')}]`\n      }\n      return JSON.stringify(value)\n    }),\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,2BAAmB;AAEZ,8BAA8B,QAAiC;AACpE,SAAO,OAAO,IAAI,qBAAqB;AAAA;AAGlC,2BAA2B;AAAA,EAChC,YAA6B,QAAyB;AAAzB;AAAA;AAAA,EAC7B,WAAmB;AACjB,UAAM,EAAE,WAAW;AAGnB,UAAM,WAAW,OAAO,SAAS,aAC7B,QAAQ,OAAO,SAAS,iBACxB,OAAO,SAAS;AAEpB,UAAM,MAAM,KAAK,MACf,KAAK,UAAU;AAAA,MACb;AAAA,MACA,eAAe,8BAA8B,OAAO;AAAA;AAIxD,WAAO,aAAa,OAAO;AAAA,EAC7B,kCAAO,qBAAqB,MAAM;AAAA;AAAA;AAAA;AAK7B,uCACL,eACA;AACA,MAAI;AACJ,MAAI,cAAc,SAAS,GAAG;AAC5B,UAAM,0BAA0B,cAAc,KAC5C,CAAC,WAAW,OAAO,eAAe;AAEpC,QAAI,yBAAyB;AAC3B,cAAQ,QAAQ,wBAAwB;AAAA,WACnC;AACL,cAAQ,cAAc,IAAI,CAAC,WAAW,OAAO;AAAA;AAAA,SAE1C;AACL,YAAQ;AAAA;AAGV,SAAO;AAAA;AAGF,8BAA8B,KAAa;AAChD,QAAM,YAAY,OAAO,KAAK,KAAK,OACjC,CAAC,KAAK,SAAS,KAAK,IAAI,KAAK,KAAK,SAClC;AAEF,SAAO,OAAO,QAAQ,KACnB,IAAI,CAAC,CAAC,KAAK,WAAW,GAAG,IAAI,OAAO,gBAAgB,cAAc,UAClE,KAAK;AAAA;AAGV,uBAAuB,OAAY;AACjC,SAAO,KAAK,MACV,KAAK,UAAU,OAAO,CAAC,GAAG,WAAU;AAClC,QAAI,MAAM,QAAQ,SAAQ;AACxB,aAAO,IAAI,OAAM,IAAI,CAAC,YAAY,KAAK,UAAU,UAAU,KAAK;AAAA;AAElE,WAAO,KAAK,UAAU;AAAA;AAAA;",
  "names": []
}
