{
  "version": 3,
  "sources": ["../src/dotenvExpand.ts"],
  "sourcesContent": ["import { DotenvConfigOutput } from 'dotenv'\n\n/**\n * Modified version of https://github.com/motdotla/dotenv-expand\n * Our version does only expand ${ENV} - curly braces but not without curly braces\n *\n * Original License from https://github.com/motdotla/dotenv-expand/blob/de9e5cb0215495452f475f5be4dea1580b8217cd/LICENSE\n * Copyright (c) 2016, Scott Motte\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *\n * * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation\n *  and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport function dotenvExpand(\n  config: DotenvConfigOutput & { ignoreProcessEnv?: boolean },\n) {\n  // if ignoring process.env, use a blank object\n  const environment = config.ignoreProcessEnv ? {} : process.env\n\n  const interpolate = (envValue: string) => {\n    const matches = envValue.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g) || []\n\n    return matches.reduce(function (newEnv, match) {\n      const parts = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(match)\n      if (!parts) {\n        return newEnv\n      }\n\n      const prefix = parts[1]\n\n      let value, replacePart\n\n      if (prefix === '\\\\') {\n        replacePart = parts[0]\n        value = replacePart.replace('\\\\$', '$')\n      } else {\n        const key = parts[2]\n        replacePart = parts[0].substring(prefix.length)\n        // process.env value 'wins' over .env file's value\n        value = Object.hasOwnProperty.call(environment, key)\n          ? environment[key]\n          : config.parsed![key] || ''\n\n        // Resolve recursive interpolations\n        value = interpolate(value)\n      }\n\n      return newEnv.replace(replacePart, value)\n    }, envValue)\n  }\n\n  for (const configKey in config.parsed) {\n    const value = Object.hasOwnProperty.call(environment, configKey)\n      ? environment[configKey]\n      : config.parsed[configKey]\n\n    config.parsed[configKey] = interpolate(value!)\n  }\n\n  for (const processKey in config.parsed) {\n    environment[processKey] = config.parsed[processKey]\n  }\n\n  return config\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAgCO,sBACL,QACA;AAEA,QAAM,cAAc,OAAO,mBAAmB,KAAK,QAAQ;AAE3D,QAAM,cAAc,CAAC,aAAqB;AACxC,UAAM,UAAU,SAAS,MAAM,kCAAkC;AAEjE,WAAO,QAAQ,OAAO,SAAU,QAAQ,OAAO;AAC7C,YAAM,QAAQ,4BAA4B,KAAK;AAC/C,UAAI,CAAC,OAAO;AACV,eAAO;AAAA;AAGT,YAAM,SAAS,MAAM;AAErB,UAAI,OAAO;AAEX,UAAI,WAAW,MAAM;AACnB,sBAAc,MAAM;AACpB,gBAAQ,YAAY,QAAQ,OAAO;AAAA,aAC9B;AACL,cAAM,MAAM,MAAM;AAClB,sBAAc,MAAM,GAAG,UAAU,OAAO;AAExC,gBAAQ,OAAO,eAAe,KAAK,aAAa,OAC5C,YAAY,OACZ,OAAO,OAAQ,QAAQ;AAG3B,gBAAQ,YAAY;AAAA;AAGtB,aAAO,OAAO,QAAQ,aAAa;AAAA,OAClC;AAAA;AAGL,aAAW,aAAa,OAAO,QAAQ;AACrC,UAAM,QAAQ,OAAO,eAAe,KAAK,aAAa,aAClD,YAAY,aACZ,OAAO,OAAO;AAElB,WAAO,OAAO,aAAa,YAAY;AAAA;AAGzC,aAAW,cAAc,OAAO,QAAQ;AACtC,gBAAY,cAAc,OAAO,OAAO;AAAA;AAG1C,SAAO;AAAA;",
  "names": []
}
