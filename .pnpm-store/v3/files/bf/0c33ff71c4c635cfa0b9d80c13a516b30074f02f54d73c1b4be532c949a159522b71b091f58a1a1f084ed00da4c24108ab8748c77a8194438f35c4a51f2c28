{"version":3,"sources":["../../src/swc/file.ts"],"sourcesContent":["import swc from \"@swc/core\";\nimport path from \"path\";\nimport slash from \"slash\";\nimport { SourceMapConsumer, SourceMapGenerator } from \"source-map\";\n\nimport { CliOptions } from \"./options\";\nimport { globSources, isCompilableExtension, watchSources } from \"./sources\";\nimport * as util from \"./util\";\n\nexport default async function ({\n  cliOptions,\n  swcOptions,\n}: {\n  cliOptions: CliOptions;\n  swcOptions: swc.Options;\n}) {\n  async function concatResults(\n    file: string,\n    ...results: swc.Output[]\n  ): Promise<swc.Output> {\n    const map = new SourceMapGenerator({\n      file,\n      sourceRoot: swcOptions.sourceRoot,\n    });\n\n    let code = \"\";\n    let offset = 0;\n\n    for (const result of results) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        const consumer = await new SourceMapConsumer(result.map);\n        const sources = new Set<string>();\n\n        consumer.eachMapping(mapping => {\n          sources.add(mapping.source);\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn,\n            },\n            original: {\n              line: mapping.originalLine,\n              column: mapping.originalColumn,\n            },\n            source: mapping.source,\n          });\n        });\n\n        sources.forEach(source => {\n          const content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n      }\n      offset = code.split(\"\\n\").length - 1;\n    }\n\n    return {\n      code,\n      map: JSON.stringify(map),\n    };\n  }\n\n  async function output(results: Iterable<swc.Output>) {\n    const file =\n      cliOptions.sourceMapTarget ||\n      path.basename(cliOptions.outFile || \"stdout\");\n\n    const result = await concatResults(file, ...results);\n\n    if (cliOptions.outFile) {\n      util.outputFile(result, cliOptions.outFile, swcOptions.sourceMaps);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n      if (result.map) {\n        const map = `//#sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(\n          JSON.stringify(result.map),\n          \"utf8\"\n        ).toString(\"base64\")}`;\n        process.stdout.write(map);\n      }\n    }\n  }\n\n  async function handle(filename: string) {\n    const sourceFileName = slash(\n      cliOptions.outFile\n        ? path.relative(path.dirname(cliOptions.outFile), filename)\n        : filename\n    );\n    return await util.compile(\n      filename,\n      {\n        ...swcOptions,\n        sourceFileName,\n      },\n      cliOptions.sync,\n      cliOptions.outFile\n    );\n  }\n\n  async function getProgram(\n    previousResults: Map<string, swc.Output | Error> = new Map()\n  ) {\n    const results: typeof previousResults = new Map();\n\n    for (const filename of await globSources(\n      cliOptions.filenames,\n      cliOptions.includeDotfiles\n    )) {\n      if (isCompilableExtension(filename, cliOptions.extensions)) {\n        results.set(filename, previousResults.get(filename)!);\n      }\n    }\n    return results;\n  }\n\n  async function files() {\n    let results = await getProgram();\n    for (const filename of results.keys()) {\n      try {\n        const result = await handle(filename);\n        if (result) {\n          results.set(filename, result);\n        } else {\n          results.delete(filename);\n        }\n      } catch (err: any) {\n        console.error(err.message);\n        results.set(filename, err);\n      }\n    }\n\n    if (cliOptions.watch) {\n      const watcher = await watchSources(\n        cliOptions.filenames,\n        cliOptions.includeDotfiles\n      );\n      watcher.on(\"ready\", () => {\n        Promise.resolve()\n          .then(async () => {\n            util.assertCompilationResult(results, cliOptions.quiet);\n            await output(results.values());\n            if (!cliOptions.quiet) {\n              console.info(\"Watching for file changes.\");\n            }\n          })\n          .catch(err => {\n            console.error(err.message);\n          });\n      });\n      watcher.on(\"add\", async filename => {\n        if (isCompilableExtension(filename, cliOptions.extensions)) {\n          // ensure consistent insertion order when files are added\n          results = await getProgram(results);\n        }\n      });\n      watcher.on(\"unlink\", filename => {\n        results.delete(filename);\n      });\n      for (const type of [\"add\", \"change\"]) {\n        watcher.on(type, filename => {\n          if (!isCompilableExtension(filename, cliOptions.extensions)) {\n            return;\n          }\n\n          const start = process.hrtime();\n\n          handle(filename)\n            .then(async result => {\n              if (!result) {\n                results.delete(filename);\n                return;\n              }\n              results.set(filename, result);\n              util.assertCompilationResult(results, true);\n              await output(results.values());\n              if (!cliOptions.quiet) {\n                const [seconds, nanoseconds] = process.hrtime(start);\n                const ms = seconds * 1000 + nanoseconds * 1e-6;\n                const name = path.basename(cliOptions.outFile);\n                console.log(`Compiled ${name} in ${ms.toFixed(2)}ms`);\n              }\n            })\n            .catch(err => {\n              console.error(err.message);\n            });\n        });\n      }\n    } else {\n      util.assertCompilationResult(results, cliOptions.quiet);\n      await output(results.values());\n    }\n  }\n\n  async function stdin() {\n    let code = \"\";\n    process.stdin.setEncoding(\"utf8\");\n    for await (const chunk of process.stdin) {\n      code += chunk;\n    }\n    const res = await util.transform(\n      cliOptions.filename,\n      code,\n      {\n        ...swcOptions,\n        sourceFileName: \"stdin\",\n      },\n      cliOptions.sync,\n      undefined\n    );\n\n    output([res]);\n  }\n\n  if (cliOptions.filenames.length) {\n    await files();\n  } else {\n    await stdin();\n  }\n}\n"],"names":["util","cliOptions","swcOptions","concatResults","file","results","map","SourceMapGenerator","sourceRoot","code","offset","result","consumer","SourceMapConsumer","sources","Set","eachMapping","mapping","add","source","addMapping","generated","line","generatedLine","column","generatedColumn","original","originalLine","originalColumn","forEach","content","sourceContentFor","setSourceContent","split","length","JSON","stringify","output","sourceMapTarget","path","basename","outFile","outputFile","sourceMaps","process","stdout","write","Buffer","from","toString","handle","filename","sourceFileName","slash","relative","dirname","compile","sync","getProgram","previousResults","Map","globSources","filenames","includeDotfiles","isCompilableExtension","extensions","set","get","files","keys","delete","err","console","error","message","watch","watcher","watchSources","on","Promise","resolve","then","assertCompilationResult","quiet","values","info","catch","type","start","hrtime","seconds","nanoseconds","ms","name","log","toFixed","stdin","setEncoding","chunk","res","transform","undefined"],"mappings":"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"}