{
  "version": 3,
  "sources": ["../src/Generator.ts"],
  "sourcesContent": ["import {\n  GeneratorOptions,\n  GeneratorProcess,\n  GeneratorManifest,\n  BinaryPaths,\n  GeneratorConfig,\n} from '@prisma/generator-helper'\n\nexport class Generator {\n  private generatorProcess: GeneratorProcess\n  public manifest: GeneratorManifest | null = null\n  public config: GeneratorConfig\n  public options?: GeneratorOptions\n  constructor(\n    executablePath: string,\n    config: GeneratorConfig,\n    isNode?: boolean,\n  ) {\n    this.config = config\n    this.generatorProcess = new GeneratorProcess(executablePath, isNode)\n  }\n  async init(): Promise<void> {\n    await this.generatorProcess.init()\n    this.manifest = await this.generatorProcess.getManifest(this.config)\n  }\n  stop(): void {\n    this.generatorProcess.stop()\n  }\n  generate(): Promise<any> {\n    if (!this.options) {\n      throw new Error(\n        `Please first run .setOptions() on the Generator to initialize the options`,\n      )\n    }\n    return this.generatorProcess.generate(this.options)\n  }\n  setOptions(options: GeneratorOptions): void {\n    this.options = options\n  }\n  setBinaryPaths(binaryPaths: BinaryPaths): void {\n    if (!this.options) {\n      throw new Error(\n        `Please first run .setOptions() on the Generator to initialize the options`,\n      )\n    }\n    this.options.binaryPaths = binaryPaths\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,8BAMO;AAEA,gBAAgB;AAAA,EAKrB,YACE,gBACA,QACA,QACA;AAPK,oBAAqC;AAQ1C,SAAK,SAAS;AACd,SAAK,mBAAmB,IAAI,yCAAiB,gBAAgB;AAAA;AAAA,QAEzD,OAAsB;AAC1B,UAAM,KAAK,iBAAiB;AAC5B,SAAK,WAAW,MAAM,KAAK,iBAAiB,YAAY,KAAK;AAAA;AAAA,EAE/D,OAAa;AACX,SAAK,iBAAiB;AAAA;AAAA,EAExB,WAAyB;AACvB,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,MACR;AAAA;AAGJ,WAAO,KAAK,iBAAiB,SAAS,KAAK;AAAA;AAAA,EAE7C,WAAW,SAAiC;AAC1C,SAAK,UAAU;AAAA;AAAA,EAEjB,eAAe,aAAgC;AAC7C,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,IAAI,MACR;AAAA;AAGJ,SAAK,QAAQ,cAAc;AAAA;AAAA;",
  "names": []
}
