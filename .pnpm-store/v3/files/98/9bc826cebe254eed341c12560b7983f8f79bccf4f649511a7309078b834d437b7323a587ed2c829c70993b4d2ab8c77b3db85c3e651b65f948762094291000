{
  "version": 3,
  "sources": ["../../src/common/Engine.ts"],
  "sourcesContent": ["import { DataSource, GeneratorConfig } from '@prisma/generator-helper'\nimport type * as Transaction from './types/Transaction'\nimport {\n  QueryEngineRequestHeaders,\n  QueryEngineResult,\n} from './types/QueryEngine'\n\nexport interface FilterConstructor {\n  new (config: EngineConfig): Engine\n}\n\n// TODO Move shared logic in here\nexport abstract class Engine {\n  abstract on(event: EngineEventType, listener: (args?: any) => any): void\n  abstract start(): Promise<void>\n  abstract stop(): Promise<void>\n  abstract getConfig(): Promise<GetConfigResult>\n  abstract version(forceRun?: boolean): Promise<string> | string\n  abstract request<T>(\n    query: string,\n    headers?: QueryEngineRequestHeaders,\n    numTry?: number,\n  ): Promise<QueryEngineResult<T>>\n  abstract requestBatch<T>(\n    queries: string[],\n    headers?: QueryEngineRequestHeaders,\n    transaction?: boolean,\n    numTry?: number,\n  ): Promise<QueryEngineResult<T>[]>\n  abstract transaction(\n    action: 'start',\n    options?: Transaction.Options,\n  ): Promise<Transaction.Info>\n  abstract transaction(action: 'commit', info: Transaction.Info): Promise<void>\n  abstract transaction(\n    action: 'rollback',\n    info: Transaction.Info,\n  ): Promise<void>\n}\n\nexport type EngineEventType = 'query' | 'info' | 'warn' | 'error' | 'beforeExit'\n\nexport interface DatasourceOverwrite {\n  name: string\n  url?: string\n  env?: string\n}\n\nexport interface EngineConfig {\n  cwd?: string\n  dirname?: string\n  datamodelPath: string\n  enableDebugLogs?: boolean\n  enableEngineDebugMode?: boolean // dangerous! https://github.com/prisma/prisma-engines/issues/764\n  prismaPath?: string\n  fetcher?: (query: string) => Promise<{ data?: any; error?: any }>\n  generator?: GeneratorConfig\n  datasources?: DatasourceOverwrite[]\n  showColors?: boolean\n  logQueries?: boolean\n  logLevel?: 'info' | 'warn'\n  env?: Record<string, string>\n  flags?: string[]\n  useUds?: boolean\n\n  clientVersion?: string\n  previewFeatures?: string[]\n  engineEndpoint?: string\n  activeProvider?: string\n}\n\nexport type GetConfigResult = {\n  datasources: DataSource[]\n  generators: GeneratorConfig[]\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAYO,aAAsB;AAAA;",
  "names": []
}
