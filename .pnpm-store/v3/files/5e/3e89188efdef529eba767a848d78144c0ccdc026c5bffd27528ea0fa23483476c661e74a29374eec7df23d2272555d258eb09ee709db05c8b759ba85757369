{
  "version": 3,
  "sources": ["../src/resolveOutput.ts"],
  "sourcesContent": ["import fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\nconst exists = promisify(fs.exists)\n\nasync function resolveNodeModulesBase(cwd: string): Promise<string> {\n  if (await exists(path.resolve(process.cwd(), 'prisma/schema.prisma'))) {\n    return process.cwd()\n  }\n  if (\n    path.relative(process.cwd(), cwd) === 'prisma' &&\n    (await exists(path.resolve(process.cwd(), 'package.json')))\n  ) {\n    return process.cwd()\n  }\n  if (await exists(path.resolve(cwd, 'node_modules'))) {\n    return cwd\n  }\n  if (await exists(path.resolve(cwd, '../node_modules'))) {\n    return path.join(cwd, '../')\n  }\n  if (await exists(path.resolve(cwd, 'package.json'))) {\n    return cwd\n  }\n  if (await exists(path.resolve(cwd, '../package.json'))) {\n    return path.join(cwd, '../')\n  }\n  return cwd\n}\n\nexport type ResolveOutputOptions = {\n  defaultOutput: string\n  baseDir: string // normally `schemaDir`, the dir containing the schema.prisma file\n}\n\nexport async function resolveOutput(\n  options: ResolveOutputOptions,\n): Promise<string> {\n  const defaultOutput = stripRelativePath(options.defaultOutput)\n  if (defaultOutput.startsWith('node_modules')) {\n    const nodeModulesBase = await resolveNodeModulesBase(options.baseDir)\n    return path.resolve(nodeModulesBase, defaultOutput)\n  }\n\n  return path.resolve(options.baseDir, defaultOutput)\n}\n\nfunction stripRelativePath(pathString: string): string {\n  if (pathString.startsWith('./')) {\n    return pathString.slice(2)\n  }\n  return pathString\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,kBAAiB;AACjB,kBAA0B;AAC1B,MAAM,SAAS,2BAAU,kBAAG;AAE5B,sCAAsC,KAA8B;AAClE,MAAI,MAAM,OAAO,oBAAK,QAAQ,QAAQ,OAAO,0BAA0B;AACrE,WAAO,QAAQ;AAAA;AAEjB,MACE,oBAAK,SAAS,QAAQ,OAAO,SAAS,YACrC,MAAM,OAAO,oBAAK,QAAQ,QAAQ,OAAO,kBAC1C;AACA,WAAO,QAAQ;AAAA;AAEjB,MAAI,MAAM,OAAO,oBAAK,QAAQ,KAAK,kBAAkB;AACnD,WAAO;AAAA;AAET,MAAI,MAAM,OAAO,oBAAK,QAAQ,KAAK,qBAAqB;AACtD,WAAO,oBAAK,KAAK,KAAK;AAAA;AAExB,MAAI,MAAM,OAAO,oBAAK,QAAQ,KAAK,kBAAkB;AACnD,WAAO;AAAA;AAET,MAAI,MAAM,OAAO,oBAAK,QAAQ,KAAK,qBAAqB;AACtD,WAAO,oBAAK,KAAK,KAAK;AAAA;AAExB,SAAO;AAAA;AAQT,6BACE,SACiB;AACjB,QAAM,gBAAgB,kBAAkB,QAAQ;AAChD,MAAI,cAAc,WAAW,iBAAiB;AAC5C,UAAM,kBAAkB,MAAM,uBAAuB,QAAQ;AAC7D,WAAO,oBAAK,QAAQ,iBAAiB;AAAA;AAGvC,SAAO,oBAAK,QAAQ,QAAQ,SAAS;AAAA;AAGvC,2BAA2B,YAA4B;AACrD,MAAI,WAAW,WAAW,OAAO;AAC/B,WAAO,WAAW,MAAM;AAAA;AAE1B,SAAO;AAAA;",
  "names": []
}
