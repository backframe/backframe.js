{
  "version": 3,
  "sources": ["../../src/utils/tryLoadEnvs.ts"],
  "sourcesContent": ["import chalk from 'chalk'\nimport Debug from '@prisma/debug'\nimport dotenv from 'dotenv'\nimport fs from 'fs'\nimport path from 'path'\nimport { dotenvExpand } from '../dotenvExpand'\nconst debug = Debug('prisma:tryLoadEnv')\n\ntype DotenvResult = dotenv.DotenvConfigOutput & {\n  ignoreProcessEnv?: boolean | undefined\n}\n\ninterface LoadEnvResult {\n  message: string\n  path: string\n  dotenvResult: DotenvResult\n}\n\nexport function tryLoadEnvs(\n  {\n    rootEnvPath,\n    schemaEnvPath,\n  }: {\n    rootEnvPath: string | null | undefined\n    schemaEnvPath: string | null | undefined\n  },\n  opts: { conflictCheck: 'warn' | 'error' | 'none' } = {\n    conflictCheck: 'none',\n  },\n) {\n  const rootEnvInfo = loadEnv(rootEnvPath)\n  if (opts.conflictCheck !== 'none') {\n    // This will throw an error if there are conflicts\n    checkForConflicts(rootEnvInfo, schemaEnvPath, opts.conflictCheck)\n  }\n  // Only load the schema .env if it is not the same as root\n  let schemaEnvInfo: LoadEnvResult | null = null\n  if (!pathsEqual(rootEnvInfo?.path, schemaEnvPath)) {\n    schemaEnvInfo = loadEnv(schemaEnvPath)\n  }\n\n  // We didn't find a .env file.\n  if (!rootEnvInfo && !schemaEnvInfo) {\n    debug('No Environment variables loaded')\n  }\n\n  // Print the error if any (if internal dotenv readFileSync throws)\n  if (schemaEnvInfo?.dotenvResult.error) {\n    return console.error(\n      chalk.redBright.bold('Schema Env Error: ') +\n        schemaEnvInfo.dotenvResult.error,\n    )\n  }\n  const messages = [rootEnvInfo?.message, schemaEnvInfo?.message].filter(\n    Boolean,\n  )\n\n  return {\n    message: messages.join('\\n'),\n    parsed: {\n      ...rootEnvInfo?.dotenvResult?.parsed,\n      ...schemaEnvInfo?.dotenvResult?.parsed,\n    },\n  }\n}\n/**\n * Will throw an error if the file at `envPath` has env conflicts with `rootEnv`\n */\nfunction checkForConflicts(\n  rootEnvInfo: LoadEnvResult | null,\n  envPath: string | null | undefined,\n  type: 'warn' | 'error',\n) {\n  const parsedRootEnv = rootEnvInfo?.dotenvResult.parsed\n  const areNotTheSame = !pathsEqual(rootEnvInfo?.path, envPath)\n  if (parsedRootEnv && envPath && areNotTheSame && fs.existsSync(envPath)) {\n    const envConfig = dotenv.parse(fs.readFileSync(envPath))\n    const conflicts: string[] = []\n    for (const k in envConfig) {\n      if (parsedRootEnv[k] === envConfig[k]) {\n        conflicts.push(k)\n      }\n    }\n    if (conflicts.length > 0) {\n      // const message = `You are trying to load env variables which are already present in your project root .env\n      const relativeRootEnvPath = path.relative(\n        process.cwd(),\n        rootEnvInfo!.path,\n      )\n      const relativeEnvPath = path.relative(process.cwd(), envPath)\n      if (type === 'error') {\n        const message = `There is a conflict between env var${\n          conflicts.length > 1 ? 's' : ''\n        } in ${chalk.underline(relativeRootEnvPath)} and ${chalk.underline(\n          relativeEnvPath,\n        )}\nConflicting env vars:\n${conflicts.map((conflict) => `  ${chalk.bold(conflict)}`).join('\\n')}\n\nWe suggest to move the contents of ${chalk.underline(\n          relativeEnvPath,\n        )} to ${chalk.underline(\n          relativeRootEnvPath,\n        )} to consolidate your env vars.\\n`\n        throw new Error(message)\n      } else if (type === 'warn') {\n        const message = `Conflict for env var${\n          conflicts.length > 1 ? 's' : ''\n        } ${conflicts\n          .map((c) => chalk.bold(c))\n          .join(', ')} in ${chalk.underline(\n          relativeRootEnvPath,\n        )} and ${chalk.underline(relativeEnvPath)}\nEnv vars from ${chalk.underline(\n          relativeEnvPath,\n        )} overwrite the ones from ${chalk.underline(relativeRootEnvPath)}\n      `\n        console.warn(`${chalk.yellow('warn(prisma)')} ${message}`)\n      }\n    }\n  }\n}\n\nexport function loadEnv(\n  envPath: string | null | undefined,\n): LoadEnvResult | null {\n  if (exists(envPath)) {\n    debug(`Environment variables loaded from ${envPath}`)\n\n    const debugEnv = process.env.DEBUG\n\n    // Value needs to be null or undefined, false is truthy\n    // https://github.com/motdotla/dotenv/blob/7301ac9be0b2c766f865bbe24280bf82586d25aa/lib/main.js#L89-L91\n    let enableDebug: true | undefined = undefined\n\n    if (debugEnv && (debugEnv.startsWith('prisma') || debugEnv === '*')) {\n      enableDebug = true\n    }\n\n    return {\n      dotenvResult: dotenvExpand(\n        dotenv.config({\n          path: envPath,\n          debug: enableDebug,\n        }),\n      ),\n      message: chalk.dim(\n        `Environment variables loaded from ${path.relative(\n          process.cwd(),\n          envPath,\n        )}`,\n      ),\n\n      path: envPath,\n    }\n  } else {\n    debug(`Environment variables not found at ${envPath}`)\n  }\n  return null\n}\nexport function pathsEqual(\n  path1: string | null | undefined,\n  path2: string | null | undefined,\n) {\n  return path1 && path2 && path.resolve(path1) === path.resolve(path2)\n}\n\nexport function exists(p: string | null | undefined): p is string {\n  return Boolean(p && fs.existsSync(p))\n}\n"],
  "mappings": "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",
  "names": []
}
