{
  "version": 3,
  "sources": ["../src/predefinedGeneratorResolvers.ts"],
  "sourcesContent": ["import Debug from '@prisma/debug'\nimport chalk from 'chalk'\nimport execa from 'execa'\nimport fs from 'fs'\nimport hasYarn from 'has-yarn'\nimport path from 'path'\nimport { resolvePkg } from './utils/resolve'\nimport { logger } from '.'\nimport { getCommandWithExecutor } from './getCommandWithExecutor'\nconst debug = Debug('prisma:generator')\n\nconst realPath = fs.promises.realpath\n\nexport type GeneratorPaths = {\n  outputPath: string\n  generatorPath: string\n  isNode?: boolean\n}\n\nexport type GeneratorResolver = (\n  baseDir: string,\n  version?: string,\n) => Promise<GeneratorPaths>\n\nexport type PredefinedGeneratorResolvers = {\n  [generatorName: string]: GeneratorResolver\n}\n\n/**\n * Tries to find a `@prisma/client` that is next to the `prisma` CLI\n * @param baseDir from where to start looking from\n * @returns `@prisma/client` location\n */\nasync function findPrismaClientDir(baseDir: string) {\n  const resolveOpts = { basedir: baseDir, preserveSymlinks: true }\n  const CLIDir = await resolvePkg('prisma', resolveOpts)\n  const clientDir = await resolvePkg('@prisma/client', resolveOpts)\n  const resolvedClientDir = clientDir && (await realPath(clientDir))\n\n  debug('prismaCLIDir', CLIDir)\n  debug('prismaClientDir', clientDir)\n\n  // If CLI not found, we can only continue forward, likely a test\n  if (CLIDir === undefined) return resolvedClientDir\n  if (clientDir === undefined) return resolvedClientDir\n\n  // for everything to work well we expect `../<client-dir>`\n  const relDir = path.relative(CLIDir, clientDir).split(path.sep)\n\n  // if the client is not near `prisma`, in parent folder => fail\n  if (relDir[0] !== '..' || relDir[1] === '..') return undefined\n\n  // we return the resolved location as pnpm users will want that\n  return resolvedClientDir\n}\n\nexport const predefinedGeneratorResolvers: PredefinedGeneratorResolvers = {\n  photonjs: () => {\n    throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:\n  1. Rename ${chalk.red('provider = \"photonjs\"')} to ${chalk.green(\n      'provider = \"prisma-client-js\"',\n    )} in your ${chalk.bold('schema.prisma')} file.\n  2. Replace your ${chalk.bold('package.json')}'s ${chalk.red(\n      '@prisma/photon',\n    )} dependency to ${chalk.green('@prisma/client')}\n  3. Replace ${chalk.red(\n    \"import { Photon } from '@prisma/photon'\",\n  )} with ${chalk.green(\n      \"import { PrismaClient } from '@prisma/client'\",\n    )} in your code.\n  4. Run ${chalk.green(getCommandWithExecutor('prisma generate'))} again.\n      `)\n  },\n  'prisma-client-js': async (baseDir, version) => {\n    let prismaClientDir = await findPrismaClientDir(baseDir)\n\n    debug('baseDir', baseDir)\n\n    checkYarnVersion()\n    await checkTypeScriptVersion()\n\n    if (!prismaClientDir && !process.env.PRISMA_GENERATE_SKIP_AUTOINSTALL) {\n      if (\n        !fs.existsSync(path.join(process.cwd(), 'package.json')) &&\n        !fs.existsSync(path.join(process.cwd(), '../package.json'))\n      ) {\n        // Create default package.json\n        const defaultPackageJson = `{\n  \"name\": \"my-prisma-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n`\n        fs.writeFileSync(\n          path.join(process.cwd(), 'package.json'),\n          defaultPackageJson,\n        )\n        console.info(`\u2714 Created ${chalk.bold.green('./package.json')}`)\n      }\n\n      await installPackage(baseDir, `-D prisma@${version ?? 'latest'}`)\n      await installPackage(baseDir, `@prisma/client@${version ?? 'latest'}`)\n\n      // resolvePkg has caching, so we trick it not to do it \uD83D\uDC47\n      prismaClientDir = await findPrismaClientDir(path.join('.', baseDir))\n\n      if (!prismaClientDir) {\n        throw new Error(\n          `Could not resolve @prisma/client despite the installation that we just tried.\nPlease try to install it by hand with ${chalk.bold.greenBright(\n            'npm install @prisma/client',\n          )} and rerun ${chalk.bold(\n            getCommandWithExecutor('prisma generate'),\n          )} \uD83D\uDE4F.`,\n        )\n      }\n\n      console.info(\n        `\\n\u2714 Installed the ${chalk.bold.green(\n          '@prisma/client',\n        )} and ${chalk.bold.green('prisma')} packages in your project`,\n      )\n    }\n\n    if (!prismaClientDir) {\n      throw new Error(\n        `Could not resolve @prisma/client.\nPlease try to install it with ${chalk.bold.greenBright(\n          'npm install @prisma/client',\n        )} and rerun ${chalk.bold(\n          getCommandWithExecutor('prisma generate'),\n        )} \uD83D\uDE4F.`,\n      )\n    }\n\n    return {\n      outputPath: prismaClientDir,\n      generatorPath: path.resolve(prismaClientDir, 'generator-build/index.js'),\n      isNode: true,\n    }\n  },\n}\n\nasync function installPackage(baseDir: string, pkg: string): Promise<void> {\n  const yarnUsed = hasYarn(baseDir) || hasYarn(path.join(baseDir, '..'))\n\n  const cmdName = yarnUsed ? 'yarn add' : 'npm install'\n\n  await execa.command(`${cmdName} ${pkg}`, {\n    cwd: baseDir,\n    stdio: 'inherit',\n    env: {\n      PRISMA_SKIP_POSTINSTALL_GENERATE: 'true',\n    },\n  })\n}\n\n/**\n * Warn, if yarn is older than 1.19.2\n * Because Yarn used to remove all dot folders inside node_modules before.\n * We use node_modules/.prisma/client directory as default location for generated Prisma Client.\n * Changelog https://github.com/yarnpkg/yarn/blob/HEAD/CHANGELOG.md#1192\n */\nfunction checkYarnVersion() {\n  if (process.env.npm_config_user_agent) {\n    const match = parseUserAgentString(process.env.npm_config_user_agent)\n    if (match) {\n      const { agent, major, minor, patch } = match\n      if (agent === 'yarn' && major === 1) {\n        const currentYarnVersion = `${major}.${minor}.${patch}`\n        const minYarnVersion = '1.19.2'\n        if (semverLt(currentYarnVersion, minYarnVersion)) {\n          logger.warn(\n            `Your ${chalk.bold(\n              'yarn',\n            )} has version ${currentYarnVersion}, which is outdated. Please update it to ${chalk.bold(\n              minYarnVersion,\n            )} or ${chalk.bold('newer')} in order to use Prisma.`,\n          )\n        }\n      }\n    }\n  }\n}\n\n/**\n * Warn, if typescript is below `4.1.0` and is install locally\n * Because Template Literal Types are required for generating Prisma Client types.\n */\nasync function checkTypeScriptVersion() {\n  const minVersion = '4.1.0'\n  try {\n    const typescriptPath = await resolvePkg('typescript', {\n      basedir: process.cwd(),\n    })\n    const typescriptPkg =\n      typescriptPath && path.join(typescriptPath, 'package.json')\n    if (typescriptPkg && fs.existsSync(typescriptPkg)) {\n      const pjson = require(typescriptPkg)\n      const currentVersion = pjson.version\n      if (semverLt(currentVersion, minVersion)) {\n        logger.warn(\n          `Prisma detected that your ${chalk.bold(\n            'TypeScript',\n          )} version ${currentVersion} is outdated. If you want to use Prisma Client with TypeScript please update it to version ${chalk.bold(\n            minVersion,\n          )} or ${chalk.bold('newer')}`,\n        )\n      }\n    }\n  } catch (e) {\n    // They do not have TS installed, we ignore (example: JS project)\n  }\n}\n\n/**\n * Returns true, if semver version `a` is lower than `b`\n * Note: This obviously doesn't support the full semver spec.\n * @param {string} a\n * @param {string} b\n */\nfunction semverLt(a, b) {\n  const [major1, minor1, patch1] = a.split('.')\n  const [major2, minor2, patch2] = b.split('.')\n\n  if (major1 < major2) {\n    return true\n  }\n\n  if (major1 > major2) {\n    return false\n  }\n\n  if (minor1 < minor2) {\n    return true\n  }\n\n  if (minor1 > minor2) {\n    return false\n  }\n\n  if (patch1 < patch2) {\n    return true\n  }\n\n  if (patch1 > patch2) {\n    return false\n  }\n\n  return false\n}\n\nfunction parseUserAgentString(str) {\n  const userAgentRegex = /(\\w+)\\/(\\d+)\\.(\\d+)\\.(\\d+)/\n  const match = userAgentRegex.exec(str)\n  if (match) {\n    const agent = match[1]\n    const major = parseInt(match[2])\n    const minor = parseInt(match[3])\n    const patch = parseInt(match[4])\n    return { agent, major, minor, patch }\n  }\n  return null\n}\n"],
  "mappings": "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",
  "names": []
}
