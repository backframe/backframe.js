{
  "version": 3,
  "sources": ["../../src/engine-commands/getVersion.ts"],
  "sourcesContent": ["import Debug from '@prisma/debug'\nimport { NodeAPILibraryTypes } from '@prisma/engine-core'\nimport { getCliQueryEngineBinaryType } from '@prisma/engines'\nimport { BinaryType } from '@prisma/fetch-engine'\nimport { isNodeAPISupported } from '@prisma/get-platform'\nimport execa from 'execa'\nimport { resolveBinary } from '../resolveBinary'\nimport { load } from '../utils/load'\n\nconst debug = Debug('prisma:getVersion')\n\nconst MAX_BUFFER = 1_000_000_000\n\nexport async function getVersion(\n  enginePath?: string,\n  binaryName?: BinaryType,\n): Promise<string> {\n  if (!binaryName) {\n    binaryName = getCliQueryEngineBinaryType()\n  }\n  enginePath = await resolveBinary(binaryName, enginePath)\n  if (binaryName === BinaryType.libqueryEngine) {\n    await isNodeAPISupported()\n\n    const QE = load<NodeAPILibraryTypes.Library>(enginePath)\n    return `libquery-engine ${QE.version().commit}`\n  } else {\n    const result = await execa(enginePath, ['--version'], {\n      maxBuffer: MAX_BUFFER,\n    })\n\n    return result.stdout\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,mBAAkB;AAElB,qBAA4C;AAC5C,0BAA2B;AAC3B,0BAAmC;AACnC,mBAAkB;AAClB,2BAA8B;AAC9B,kBAAqB;AAErB,MAAM,QAAQ,0BAAM;AAEpB,MAAM,aAAa;AAEnB,0BACE,YACA,YACiB;AACjB,MAAI,CAAC,YAAY;AACf,iBAAa;AAAA;AAEf,eAAa,MAAM,wCAAc,YAAY;AAC7C,MAAI,eAAe,+BAAW,gBAAgB;AAC5C,UAAM;AAEN,UAAM,KAAK,sBAAkC;AAC7C,WAAO,mBAAmB,GAAG,UAAU;AAAA,SAClC;AACL,UAAM,SAAS,MAAM,0BAAM,YAAY,CAAC,cAAc;AAAA,MACpD,WAAW;AAAA;AAGb,WAAO,OAAO;AAAA;AAAA;",
  "names": []
}
