{
  "version": 3,
  "sources": ["../src/GeneratorProcess.ts"],
  "sourcesContent": ["import { ChildProcessByStdio, fork } from 'child_process'\nimport { spawn } from 'cross-spawn'\nimport byline from './byline'\nimport {\n  GeneratorConfig,\n  GeneratorManifest,\n  GeneratorOptions,\n  JsonRPC,\n} from './types'\nimport chalk from 'chalk'\nimport Debug from '@prisma/debug'\n\nconst debug = Debug('prisma:GeneratorProcess')\n\nlet globalMessageId = 1\n\nexport class GeneratorError extends Error {\n  public code: number\n  public data?: any\n  constructor(message: string, code: number, data?: any) {\n    super(message)\n    this.code = code\n    this.data = data\n  }\n}\n\nexport class GeneratorProcess {\n  child?: ChildProcessByStdio<any, any, any>\n  listeners: { [key: string]: (result: any, err?: Error) => void } = {}\n  private exitCode: number | null = null\n  private stderrLogs = ''\n  private initPromise?: Promise<void>\n  private lastError?: Error\n  private currentGenerateDeferred?: {\n    resolve: (result: any) => void\n    reject: (error: Error) => void\n  }\n  constructor(private executablePath: string, private isNode?: boolean) {}\n  async init(): Promise<void> {\n    if (!this.initPromise) {\n      this.initPromise = this.initSingleton()\n    }\n    return this.initPromise\n  }\n  initSingleton(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        if (this.isNode) {\n          this.child = fork(this.executablePath, [], {\n            stdio: ['pipe', 'inherit', 'pipe', 'ipc'],\n            env: {\n              ...process.env,\n              PRISMA_GENERATOR_INVOCATION: 'true',\n            },\n            execArgv: ['--max-old-space-size=8096'],\n          })\n        } else {\n          this.child = spawn(this.executablePath, {\n            stdio: ['pipe', 'inherit', 'pipe'],\n            env: {\n              ...process.env,\n              PRISMA_GENERATOR_INVOCATION: 'true',\n            },\n            shell: true,\n          })\n        }\n\n        this.child.on('exit', (code) => {\n          this.exitCode = code\n          if (code && code > 0 && this.currentGenerateDeferred) {\n            // print last 5 lines of stderr\n            this.currentGenerateDeferred.reject(\n              new Error(this.stderrLogs.split('\\n').slice(-5).join('\\n')),\n            )\n          }\n        })\n\n        this.child.on('error', (err) => {\n          this.lastError = err\n          if (err.message.includes('EACCES')) {\n            reject(\n              new Error(\n                `The executable at ${\n                  this.executablePath\n                } lacks the right chmod. Please use ${chalk.bold(\n                  `chmod +x ${this.executablePath}`,\n                )}`,\n              ),\n            )\n          } else {\n            reject(err)\n          }\n        })\n\n        byline(this.child.stderr).on('data', (line) => {\n          const response = String(line)\n          this.stderrLogs += response + '\\n'\n          let data\n          try {\n            data = JSON.parse(response)\n          } catch (e) {\n            debug(response)\n          }\n          if (data) {\n            this.handleResponse(data)\n          }\n        })\n        // wait 200ms for the binary to fail\n        setTimeout(() => {\n          if (this.exitCode && this.exitCode > 0) {\n            reject(\n              new Error(\n                `Generator at ${this.executablePath} could not start:\\n\\n${this.stderrLogs}`,\n              ),\n            )\n          } else {\n            resolve()\n          }\n        }, 200)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n  private handleResponse(data: any): void {\n    if (data.jsonrpc && data.id) {\n      if (typeof data.id !== 'number') {\n        throw new Error(`message.id has to be a number. Found value ${data.id}`)\n      }\n      if (this.listeners[data.id]) {\n        if (data.error) {\n          const error = new GeneratorError(\n            data.error.message,\n            data.error.code,\n            data.error.data,\n          )\n          this.listeners[data.id](null, error)\n        } else {\n          this.listeners[data.id](data.result)\n        }\n        delete this.listeners[data.id]\n      }\n    }\n  }\n  private registerListener(\n    messageId: number,\n    cb: (result: any, err?: Error) => void,\n  ): void {\n    this.listeners[messageId] = cb\n  }\n  private sendMessage(message: JsonRPC.Request): void {\n    this.child!.stdin.write(JSON.stringify(message) + '\\n')\n  }\n  private getMessageId(): number {\n    return globalMessageId++\n  }\n  stop(): void {\n    if (!this.child!.killed) {\n      this.child!.kill()\n    }\n  }\n  getManifest(config: GeneratorConfig): Promise<GeneratorManifest | null> {\n    return new Promise((resolve, reject) => {\n      const messageId = this.getMessageId()\n\n      this.registerListener(messageId, (result, error) => {\n        if (error) {\n          return reject(error)\n        }\n        if (result.manifest) {\n          resolve(result.manifest)\n        } else {\n          resolve(null)\n        }\n      })\n\n      this.sendMessage({\n        jsonrpc: '2.0',\n        method: 'getManifest',\n        params: config,\n        id: messageId,\n      })\n    })\n  }\n  generate(options: GeneratorOptions): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const messageId = this.getMessageId()\n\n      this.currentGenerateDeferred = { resolve, reject }\n\n      this.registerListener(messageId, (result, error) => {\n        if (error) {\n          reject(error)\n          this.currentGenerateDeferred = undefined\n          return\n        }\n        resolve(result)\n        this.currentGenerateDeferred = undefined\n      })\n\n      this.sendMessage({\n        jsonrpc: '2.0',\n        method: 'generate',\n        params: options,\n        id: messageId,\n      })\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
