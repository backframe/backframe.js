{"version":3,"sources":["../../../src/swc/__mocks__/fs.ts"],"sourcesContent":["import fs from 'fs';\nimport type { Stats } from \"fs\";\n\n\nexport interface MockHelpers {\n  resetMockStats: () => void;\n  setMockStats: (stats: Record<string, Stats | Error>) => void;\n}\n\nconst fsMock = jest.createMockFromModule<typeof fs & MockHelpers>('fs');\n\nlet mockStats: Record<string, Stats | Error> = {}\n\nfunction setMockStats(stats: Record<string, Stats | Error>) {\n  Object.entries(stats).forEach(([path, stats]) => {\n    mockStats[path] = stats;\n  });\n}\nfunction resetMockStats() {\n  mockStats = {};\n}\n\nexport function stat(path: string, cb: (err?: Error, stats?: Stats) => void) {\n  const result = mockStats[path];\n  if (result instanceof Error) {\n    cb(result, undefined);\n  } else {\n    cb(undefined, result);\n  }\n}\n\nfsMock.setMockStats = setMockStats;\nfsMock.resetMockStats = resetMockStats;\n\nfsMock.stat = stat as typeof fs.stat;\n\nexport default fsMock;"],"names":["stat","fsMock","jest","createMockFromModule","mockStats","setMockStats","stats","Object","entries","forEach","path","resetMockStats","cb","result","Error","undefined"],"mappings":"AAAA,YAAA;;;EAAA;QAsBgBA,IAAI,GAAJA,IAAI,AAtBpB;wBAAA;AASA,MAAMC,MAAM,GAAGC,IAAI,CAACC,oBAAoB,CAA0B,IAAI,CAAC,AAAC;AAExE,IAAIC,SAAS,GAAkC,EAAE;AAEjD,SAASC,YAAY,CAACC,MAAoC,EAAE;IAC1DC,MAAM,CAACC,OAAO,CAACF,MAAK,CAAC,CAACG,OAAO,CAAC,CAAC,CAACC,IAAI,EAAEJ,KAAK,CAAC,GAAK;QAC/CF,SAAS,CAACM,IAAI,CAAC,GAAGJ,KAAK,CAAC;KACzB,CAAC,CAAC;CACJ;AACD,SAASK,cAAc,GAAG;IACxBP,SAAS,GAAG,EAAE,CAAC;CAChB;AAEM,SAASJ,IAAI,CAACU,IAAY,EAAEE,EAAwC,EAAE;IAC3E,MAAMC,MAAM,GAAGT,SAAS,CAACM,IAAI,CAAC,AAAC;IAC/B,IAAIG,MAAM,YAAYC,KAAK,EAAE;QAC3BF,EAAE,CAACC,MAAM,EAAEE,SAAS,CAAC,CAAC;KACvB,MAAM;QACLH,EAAE,CAACG,SAAS,EAAEF,MAAM,CAAC,CAAC;KACvB;CACF;AAEDZ,MAAM,CAACI,YAAY,GAAGA,YAAY,CAAC;AACnCJ,MAAM,CAACU,cAAc,GAAGA,cAAc,CAAC;AAEvCV,MAAM,CAACD,IAAI,GAAGA,IAAI,AAAkB,CAAC;eAEtBC,MAAM;0BApCrB"}