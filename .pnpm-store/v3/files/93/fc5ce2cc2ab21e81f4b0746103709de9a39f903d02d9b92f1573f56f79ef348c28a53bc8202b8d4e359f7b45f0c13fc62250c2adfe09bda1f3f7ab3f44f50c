{
  "version": 3,
  "sources": ["../../../src/common/types/QueryEngine.ts"],
  "sourcesContent": ["import { DataSource, GeneratorConfig } from '@prisma/generator-helper'\n\n// Events\nexport type QueryEngineEvent =\n  | QueryEngineLogEvent\n  | QueryEngineQueryEvent\n  | QueryEnginePanicEvent\n\nexport type QueryEngineLogEvent = {\n  level: string\n  module_path: string\n  message: string\n}\n\nexport type QueryEngineQueryEvent = {\n  level: 'info'\n  module_path: string\n  query: string\n  item_type: 'query'\n  params: string\n  duration_ms: string\n  result: string\n}\n\nexport type QueryEnginePanicEvent = {\n  level: 'error'\n  module_path: string\n  message: 'PANIC'\n  reason: string\n  file: string\n  line: string\n  column: string\n}\n\n// Configuration\nexport type QueryEngineLogLevel =\n  | 'trace'\n  | 'debug'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'off'\n\nexport type QueryEngineConfig = {\n  // TODO rename datamodel here and other places\n  datamodel: string\n  configDir: string\n  logQueries: boolean\n  ignoreEnvVarErrors: boolean\n  datasourceOverrides?: Record<string, string>\n  env: NodeJS.ProcessEnv | Record<string, string>\n  logLevel: QueryEngineLogLevel\n  telemetry?: QueryEngineTelemetry\n}\n\nexport type QueryEngineTelemetry = {\n  enabled: Boolean\n  endpoint: string\n}\n\nexport type QueryEngineRequest = {\n  query: string\n  variables: Object\n}\n\nexport type QueryEngineResult<T> = {\n  data: T\n  elapsed: number\n}\n\nexport type QueryEngineRequestHeaders = {\n  traceparent?: string\n  transactionId?: string\n  fatal?: string // TODO\n}\n\nexport type QueryEngineBatchRequest = {\n  batch: QueryEngineRequest[]\n  transaction: boolean\n}\n\nexport type GetConfigOptions = {\n  datamodel: string\n  ignoreEnvVarErrors: boolean\n  datasourceOverrides: Record<string, string>\n  env: NodeJS.ProcessEnv | Record<string, string>\n}\n\nexport type GetDMMFOptions = {\n  datamodel: string\n  enableRawQueries: boolean\n}\n\n// Errors\nexport type SyncRustError = {\n  is_panic: boolean\n  message: string\n  meta: {\n    full_error: string\n  }\n  error_code: string\n}\n\nexport type RustRequestError = {\n  is_panic: boolean\n  message: string\n  backtrace: string\n}\n\n// Responses\nexport type ConfigMetaFormat = {\n  datasources: DataSource[]\n  generators: GeneratorConfig[]\n  warnings: string[]\n}\n\nexport type ServerInfo = {\n  commit: string\n  version: string\n  primaryConnector: string\n}\n"],
  "mappings": ";;AAAA;",
  "names": []
}
