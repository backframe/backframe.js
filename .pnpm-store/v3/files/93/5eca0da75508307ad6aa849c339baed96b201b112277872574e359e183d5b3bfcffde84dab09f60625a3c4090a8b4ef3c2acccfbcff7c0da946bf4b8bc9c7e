{
  "version": 3,
  "sources": ["../src/dmmf.ts"],
  "sourcesContent": ["// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace DMMF {\n  export interface Document {\n    datamodel: Datamodel\n    schema: Schema\n    mappings: Mappings\n  }\n\n  export interface Mappings {\n    modelOperations: ModelMapping[]\n    otherOperations: {\n      read: string[]\n      write: string[]\n    }\n  }\n\n  export interface OtherOperationMappings {\n    read: string[]\n    write: string[]\n  }\n\n  export interface DatamodelEnum {\n    name: string\n    values: EnumValue[]\n    dbName?: string | null\n    documentation?: string\n  }\n\n  export interface SchemaEnum {\n    name: string\n    values: string[]\n  }\n\n  export interface EnumValue {\n    name: string\n    dbName: string | null\n  }\n\n  export interface Datamodel {\n    models: Model[]\n    enums: DatamodelEnum[]\n  }\n\n  export interface uniqueIndex {\n    name: string\n    fields: string[]\n  }\n  export interface PrimaryKey {\n    name: string | null\n    fields: string[]\n  }\n  export interface Model {\n    name: string\n    isEmbedded: boolean\n    dbName: string | null\n    fields: Field[]\n    fieldMap?: Record<string, Field>\n    uniqueFields: string[][]\n    uniqueIndexes: uniqueIndex[]\n    documentation?: string\n    primaryKey: PrimaryKey | null\n    [key: string]: any // safe net for additional new props\n  }\n\n  export type FieldKind = 'scalar' | 'object' | 'enum' | 'unsupported'\n\n  export type FieldNamespace = 'model' | 'prisma'\n  export type FieldLocation =\n    | 'scalar'\n    | 'inputObjectTypes'\n    | 'outputObjectTypes'\n    | 'enumTypes'\n\n  export interface Field {\n    kind: FieldKind\n    name: string\n    isRequired: boolean\n    isList: boolean\n    isUnique: boolean\n    isId: boolean\n    type: string\n    dbNames?: string[] | null\n    isGenerated: boolean\n    hasDefaultValue: boolean\n    default?: FieldDefault | string | boolean | number\n    relationToFields?: any[]\n    relationOnDelete?: string\n    relationName?: string\n    documentation?: string\n    [key: string]: any // safe net for additional new props\n  }\n\n  export interface FieldDefault {\n    name: string\n    args: any[]\n  }\n\n  export interface Schema {\n    rootQueryType?: string\n    rootMutationType?: string\n    inputObjectTypes: {\n      // For now there are no `model` InputTypes\n      model?: InputType[]\n      prisma: InputType[]\n    }\n    outputObjectTypes: {\n      model: OutputType[]\n      prisma: OutputType[]\n    }\n    enumTypes: {\n      model?: SchemaEnum[]\n      prisma: SchemaEnum[]\n    }\n  }\n\n  export interface Query {\n    name: string\n    args: SchemaArg[]\n    output: QueryOutput\n  }\n\n  export interface QueryOutput {\n    name: string\n    isRequired: boolean\n    isList: boolean\n  }\n\n  export type ArgType = string | InputType | SchemaEnum\n\n  export interface SchemaArgInputType {\n    isList: boolean\n    type: ArgType\n    location: FieldLocation\n    namespace?: FieldNamespace\n  }\n\n  export interface SchemaArg {\n    name: string\n    comment?: string\n    isNullable: boolean\n    isRequired: boolean\n    inputTypes: SchemaArgInputType[]\n    deprecation?: Deprecation\n  }\n\n  export interface OutputType {\n    name: string\n    fields: SchemaField[]\n    fieldMap?: Record<string, SchemaField>\n    isEmbedded?: boolean\n  }\n\n  export interface SchemaField {\n    name: string\n    isNullable?: boolean\n    outputType: {\n      type: string | OutputType | SchemaEnum // note that in the serialized state we don't have the reference to MergedOutputTypes\n      isList: boolean\n      location: FieldLocation\n      namespace?: FieldNamespace\n    }\n    args: SchemaArg[]\n    deprecation?: Deprecation\n  }\n\n  export interface Deprecation {\n    sinceVersion: string\n    reason: string\n    plannedRemovalVersion?: string\n  }\n\n  export interface InputType {\n    name: string\n    constraints: {\n      maxNumFields: number | null\n      minNumFields: number | null\n    }\n    fields: SchemaArg[]\n    fieldMap?: Record<string, SchemaArg>\n  }\n\n  export interface ModelMapping {\n    model: string\n    plural: string\n    findUnique?: string | null\n    findFirst?: string | null\n    findMany?: string | null\n    create?: string | null\n    createMany?: string | null\n    update?: string | null\n    updateMany?: string | null\n    upsert?: string | null\n    delete?: string | null\n    deleteMany?: string | null\n    aggregate?: string | null\n    groupBy?: string | null\n    count?: string | null\n  }\n\n  export enum ModelAction {\n    findUnique = 'findUnique',\n    findFirst = 'findFirst',\n    findMany = 'findMany',\n    create = 'create',\n    createMany = 'createMany',\n    update = 'update',\n    updateMany = 'updateMany',\n    upsert = 'upsert',\n    delete = 'delete',\n    deleteMany = 'deleteMany',\n    groupBy = 'groupBy',\n    count = 'count',\n    aggregate = 'aggregate',\n  }\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AACO,IAAU;AAAV,UAAU,OAAV;AAsME,MAAK;AAAL,YAAK,cAAL;AACL,iCAAa;AACb,gCAAY;AACZ,+BAAW;AACX,6BAAS;AACT,iCAAa;AACb,6BAAS;AACT,iCAAa;AACb,6BAAS;AACT,6BAAS;AACT,iCAAa;AACb,8BAAU;AACV,4BAAQ;AACR,gCAAY;AAAA,KAbF;AAAA,GAtMG;",
  "names": []
}
