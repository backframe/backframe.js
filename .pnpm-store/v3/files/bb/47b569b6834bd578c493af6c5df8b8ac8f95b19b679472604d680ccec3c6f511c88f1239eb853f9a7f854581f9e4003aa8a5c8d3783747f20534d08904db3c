{
  "version": 3,
  "sources": ["../../../../src/common/errors/utils/log.ts"],
  "sourcesContent": ["export type LogLevel = 'info' | 'trace' | 'debug' | 'warn' | 'error' | 'query'\n\nexport interface RawRustLog {\n  timestamp: string\n  level: LogLevel\n  target: string\n  fields: LogFields\n}\n\nexport interface RustLog {\n  timestamp: Date\n  level: LogLevel\n  target: string\n  fields: LogFields\n}\n\n// TODO #debt check if this is up to date\nexport interface RustError {\n  is_panic: boolean\n  message: string\n  backtrace?: string\n}\n\nexport function getMessage(log: string | RustLog | RustError | any): string {\n  if (typeof log === 'string') {\n    return log\n  } else if (isRustError(log)) {\n    return getBacktraceFromRustError(log)\n  } else if (isRustLog(log)) {\n    return getBacktraceFromLog(log)\n  }\n\n  return JSON.stringify(log)\n}\n\nexport function getBacktraceFromLog(log: RustLog): string {\n  if (log.fields?.message) {\n    let str = log.fields?.message\n    if (log.fields?.file) {\n      str += ` in ${log.fields.file}`\n      if (log.fields?.line) {\n        str += `:${log.fields.line}`\n      }\n      if (log.fields?.column) {\n        str += `:${log.fields.column}`\n      }\n    }\n    if (log.fields?.reason) {\n      str += `\\n${log.fields?.reason}`\n    }\n    return str\n  }\n\n  return 'Unknown error'\n}\n\nexport function getBacktraceFromRustError(err: RustError): string {\n  let str = ''\n  if (err.is_panic) {\n    str += `PANIC`\n  }\n  if (err.backtrace) {\n    str += ` in ${err.backtrace}`\n  }\n  if (err.message) {\n    str += `\\n${err.message}`\n  }\n  return str\n}\n\nexport function isRustLog(e: any): e is RustLog {\n  return (\n    e.timestamp && typeof e.level === 'string' && typeof e.target === 'string'\n  )\n}\n\nexport function isRustErrorLog(e: any): e is RustLog {\n  return (\n    isRustLog(e) &&\n    (e.level === 'error' || e.fields?.message?.includes('fatal error'))\n  )\n}\n\nexport function isRustError(e: any): e is RustError {\n  return typeof e.is_panic !== 'undefined'\n}\n\nexport type LogFields = { [key: string]: any }\n\nexport interface PanicLogFields {\n  message: 'PANIC'\n  reason: string\n  file: string\n  line: string\n  column: number\n}\n\nexport interface InfoLogFields {\n  message: string\n  'log.target': string\n  'log.module_path': string\n  'log.file': string\n  'log.line': number\n}\n\nexport interface QueryLogFields {\n  query: string\n  item_type: string\n  params: string\n  duration_ms: number\n}\n\nexport interface Log {\n  message: string\n  level: LogLevel\n  date: Date\n  application: string\n  [key: string]: string | Date\n}\n\nexport function convertLog(rustLog: RawRustLog): RustLog {\n  const isQuery = isQueryLog(rustLog.fields)\n  const level: LogLevel = isQuery\n    ? 'query'\n    : (rustLog.level.toLowerCase() as LogLevel)\n  return {\n    ...rustLog,\n    level,\n    timestamp: new Date(new Date().getFullYear() + ' ' + rustLog.timestamp),\n  }\n}\n\nfunction isQueryLog(fields: any): fields is QueryLogFields {\n  return Boolean(fields.query)\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBO,oBAAoB,KAAiD;AAC1E,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,aACE,YAAY,MAAM;AAC3B,WAAO,0BAA0B;AAAA,aACxB,UAAU,MAAM;AACzB,WAAO,oBAAoB;AAAA;AAG7B,SAAO,KAAK,UAAU;AAAA;AAGjB,6BAA6B,KAAsB;AAnC1D;AAoCE,MAAI,UAAI,WAAJ,mBAAY,SAAS;AACvB,QAAI,MAAM,UAAI,WAAJ,mBAAY;AACtB,QAAI,UAAI,WAAJ,mBAAY,MAAM;AACpB,aAAO,OAAO,IAAI,OAAO;AACzB,UAAI,UAAI,WAAJ,mBAAY,MAAM;AACpB,eAAO,IAAI,IAAI,OAAO;AAAA;AAExB,UAAI,UAAI,WAAJ,mBAAY,QAAQ;AACtB,eAAO,IAAI,IAAI,OAAO;AAAA;AAAA;AAG1B,QAAI,UAAI,WAAJ,mBAAY,QAAQ;AACtB,aAAO;AAAA,EAAK,UAAI,WAAJ,mBAAY;AAAA;AAE1B,WAAO;AAAA;AAGT,SAAO;AAAA;AAGF,mCAAmC,KAAwB;AAChE,MAAI,MAAM;AACV,MAAI,IAAI,UAAU;AAChB,WAAO;AAAA;AAET,MAAI,IAAI,WAAW;AACjB,WAAO,OAAO,IAAI;AAAA;AAEpB,MAAI,IAAI,SAAS;AACf,WAAO;AAAA,EAAK,IAAI;AAAA;AAElB,SAAO;AAAA;AAGF,mBAAmB,GAAsB;AAC9C,SACE,EAAE,aAAa,OAAO,EAAE,UAAU,YAAY,OAAO,EAAE,WAAW;AAAA;AAI/D,wBAAwB,GAAsB;AA5ErD;AA6EE,SACE,UAAU,MACT,GAAE,UAAU,WAAW,eAAE,WAAF,mBAAU,YAAV,mBAAmB,SAAS;AAAA;AAIjD,qBAAqB,GAAwB;AAClD,SAAO,OAAO,EAAE,aAAa;AAAA;AAoCxB,oBAAoB,SAA8B;AACvD,QAAM,UAAU,WAAW,QAAQ;AACnC,QAAM,QAAkB,UACpB,UACC,QAAQ,MAAM;AACnB,SAAO;AAAA,OACF;AAAA,IACH;AAAA,IACA,WAAW,IAAI,KAAK,IAAI,OAAO,gBAAgB,MAAM,QAAQ;AAAA;AAAA;AAIjE,oBAAoB,QAAuC;AACzD,SAAO,QAAQ,OAAO;AAAA;",
  "names": []
}
