{
  "version": 3,
  "sources": ["../../src/binary/Connection.ts"],
  "sourcesContent": ["import getStream = require('get-stream')\nimport { Client, Pool } from 'undici'\nimport { URL } from 'url'\n\nexport type Result<R> = {\n  statusCode: Client.ResponseData['statusCode']\n  headers: Client.ResponseData['headers']\n  data: R\n}\n\n/**\n * Assertion function to make sure that we have a pool\n * @param pool\n */\nfunction assertHasPool<A>(pool: A): asserts pool is NonNullable<A> {\n  if (pool === undefined) {\n    throw new Error('Connection has not been opened')\n  }\n}\n\n/**\n * Open an HTTP connection pool\n */\nexport class Connection {\n  private _pool: Pool | undefined\n\n  constructor() {}\n\n  /**\n   * Wrapper to handle HTTP error codes. HTTP errors don't trigger any\n   * execptions because it is optional to handle error status codes.\n   * @param response to handle\n   * @param handler to execute\n   * @returns\n   */\n  static async onHttpError<R, HR>(\n    response: Promise<Result<R>>,\n    handler: (result: Result<R>) => HR,\n  ) {\n    const _response = await response\n\n    if (_response.statusCode >= 400) {\n      return handler(_response)\n    }\n\n    return _response\n  }\n\n  /**\n   * Initiates a new connection pool\n   * @param url\n   * @param options\n   * @returns\n   */\n  open(url: string | URL, options?: Pool.Options) {\n    if (this._pool) return\n\n    this._pool = new Pool(url, {\n      connections: 100,\n      pipelining: 10,\n      keepAliveMaxTimeout: 600e3,\n      headersTimeout: 0,\n      ...options,\n    })\n  }\n\n  /**\n   * Perform a request\n   * @param method\n   * @param endpoint\n   * @param headers\n   * @param body\n   * @returns\n   */\n  async raw<R>(\n    method: 'POST' | 'GET',\n    endpoint: string,\n    headers?: Client.DispatchOptions['headers'],\n    body?: Client.DispatchOptions['body'],\n  ) {\n    assertHasPool(this._pool)\n\n    const response = await this._pool.request({\n      path: endpoint,\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body,\n      bodyTimeout: 0,\n    })\n\n    const result: Result<R> = {\n      statusCode: response.statusCode,\n      headers: response.headers,\n      data: JSON.parse(await getStream(response.body)) as R,\n    }\n\n    return result\n  }\n\n  /**\n   * Perform a POST request\n   * @param endpoint\n   * @param body\n   * @param headers\n   * @returns\n   */\n  post<R>(\n    endpoint: string,\n    body?: Client.DispatchOptions['body'],\n    headers?: Client.DispatchOptions['headers'],\n  ) {\n    return this.raw<R>('POST', endpoint, headers, body)\n  }\n\n  /**\n   * Perform a GET request\n   * @param endpoint\n   * @param body\n   * @param headers\n   * @returns\n   */\n  get<R>(path: string, headers?: Client.DispatchOptions['headers']) {\n    return this.raw<R>('GET', path, headers)\n  }\n\n  /**\n   * Close the connections\n   */\n  close() {\n    if (this._pool) {\n      this._pool.close(() => {\n        // ignore close errors\n      })\n    }\n\n    this._pool = undefined\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,oBAA6B;AAD7B,MAAO,YAAY,QAAQ;AAc3B,uBAA0B,MAAyC;AACjE,MAAI,SAAS,QAAW;AACtB,UAAM,IAAI,MAAM;AAAA;AAAA;AAOb,iBAAiB;AAAA,EAGtB,cAAc;AAAA;AAAA,eASD,YACX,UACA,SACA;AACA,UAAM,YAAY,MAAM;AAExB,QAAI,UAAU,cAAc,KAAK;AAC/B,aAAO,QAAQ;AAAA;AAGjB,WAAO;AAAA;AAAA,EAST,KAAK,KAAmB,SAAwB;AAC9C,QAAI,KAAK;AAAO;AAEhB,SAAK,QAAQ,IAAI,mBAAK,KAAK;AAAA,MACzB,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,qBAAqB;AAAA,MACrB,gBAAgB;AAAA,SACb;AAAA;AAAA;AAAA,QAYD,IACJ,QACA,UACA,SACA,MACA;AACA,kBAAc,KAAK;AAEnB,UAAM,WAAW,MAAM,KAAK,MAAM,QAAQ;AAAA,MACxC,MAAM;AAAA,MACN;AAAA,MACA,SAAS;AAAA,QACP,gBAAgB;AAAA,WACb;AAAA;AAAA,MAEL;AAAA,MACA,aAAa;AAAA;AAGf,UAAM,SAAoB;AAAA,MACxB,YAAY,SAAS;AAAA,MACrB,SAAS,SAAS;AAAA,MAClB,MAAM,KAAK,MAAM,MAAM,UAAU,SAAS;AAAA;AAG5C,WAAO;AAAA;AAAA,EAUT,KACE,UACA,MACA,SACA;AACA,WAAO,KAAK,IAAO,QAAQ,UAAU,SAAS;AAAA;AAAA,EAUhD,IAAO,MAAc,SAA6C;AAChE,WAAO,KAAK,IAAO,OAAO,MAAM;AAAA;AAAA,EAMlC,QAAQ;AACN,QAAI,KAAK,OAAO;AACd,WAAK,MAAM,MAAM,MAAM;AAAA;AAAA;AAKzB,SAAK,QAAQ;AAAA;AAAA;",
  "names": []
}
